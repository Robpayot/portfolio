{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dev/javascripts/app.js","dev/javascripts/vendors/modernizr.js","dev/javascripts/xp/xp.js","node_modules/sono/dist/sono.js"],"names":[],"mappings":"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":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n// Default Babel Polyfill, be careful, be sure you need it\n// because it's ~6000 lines of code unminified\n// import 'babel-polyfill';\nimport 'modernizr';\n// import * as tools from '@84paris/84.tools';\n\n// Your imports\n// import MyComponent from './component.es6'\nconsole.log('%c 84.Boilerplate ===== Your app is ready.', 'background: #000; color: #FFF');\n\nimport Xp from './xp/xp';\n\n","/*!\n * modernizr v3.3.1\n * Build http://modernizr.com/download?-cssanimations-csscalc-cssgradients-csstransforms3d-history-webgl-setclasses-shiv-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(window, document, undefined){\n  var classes = [];\n\n\n  var tests = [];\n\n\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.3.1',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name: name, fn: fn, options: options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name: null, fn: fn});\n    }\n  };\n\n\n\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n\n/*!\n{\n  \"name\": \"History API\",\n  \"property\": \"history\",\n  \"caniuse\": \"history\",\n  \"tags\": [\"history\"],\n  \"authors\": [\"Hay Kranen\", \"Alexander Farkas\"],\n  \"notes\": [{\n    \"name\": \"W3C Spec\",\n    \"href\": \"https://www.w3.org/TR/html51/browsers.html#the-history-interface\"\n  }, {\n    \"name\": \"MDN documentation\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/window.history\"\n  }],\n  \"polyfills\": [\"historyjs\", \"html5historyapi\"]\n}\n!*/\n/* DOC\nDetects support for the History API for manipulating the browser session history.\n*/\n\n  Modernizr.addTest('history', function() {\n    // Issue #733\n    // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support\n    // Unfortunately support is really buggy and there is no clean way to detect\n    // these bugs, so we fall back to a user agent sniff :(\n    var ua = navigator.userAgent;\n\n    // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies\n    // itself as 'Mobile Safari' as well, nor Windows Phone (issue #1471).\n    if ((ua.indexOf('Android 2.') !== -1 ||\n        (ua.indexOf('Android 4.0') !== -1)) &&\n        ua.indexOf('Mobile Safari') !== -1 &&\n        ua.indexOf('Chrome') === -1 &&\n        ua.indexOf('Windows Phone') === -1) {\n      return false;\n    }\n\n    // Return the regular check\n    return (window.history && 'pushState' in window.history);\n  });\n\n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n  ;\n\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            /* jshint -W053 */\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  ;\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n\n\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n\n\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      isSVG ? docElement.className.baseVal = className : docElement.className = className;\n    }\n\n  }\n\n  ;\n\n/**\n  * @optionName html5shiv\n  * @optionProp html5shiv\n  */\n\n  // Take the html5 variable out of the html5shiv scope so we can return it.\n  var html5;\n  if (!isSVG) {\n    /**\n     * @preserve HTML5 Shiv 3.7.3 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n     */\n    ;(function(window, document) {\n      /*jshint evil:true */\n      /** version */\n      var version = '3.7.3';\n\n      /** Preset options */\n      var options = window.html5 || {};\n\n      /** Used to skip problem elements */\n      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n      /** Not all elements can be cloned in IE **/\n      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n      /** Detect whether the browser supports default html5 styles */\n      var supportsHtml5Styles;\n\n      /** Name of the expando, to work with multiple documents or to re-shiv one document */\n      var expando = '_html5shiv';\n\n      /** The id for the the documents expando */\n      var expanID = 0;\n\n      /** Cached data for each document */\n      var expandoData = {};\n\n      /** Detect whether the browser supports unknown elements */\n      var supportsUnknownElements;\n\n      (function() {\n        try {\n          var a = document.createElement('a');\n          a.innerHTML = '<xyz></xyz>';\n          //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n          supportsHtml5Styles = ('hidden' in a);\n\n          supportsUnknownElements = a.childNodes.length == 1 || (function() {\n            // assign a false positive if unable to shiv\n            (document.createElement)('a');\n            var frag = document.createDocumentFragment();\n            return (\n              typeof frag.cloneNode == 'undefined' ||\n                typeof frag.createDocumentFragment == 'undefined' ||\n                typeof frag.createElement == 'undefined'\n            );\n          }());\n        } catch(e) {\n          // assign a false positive if detection fails => unable to shiv\n          supportsHtml5Styles = true;\n          supportsUnknownElements = true;\n        }\n\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Creates a style sheet with the given CSS text and adds it to the document.\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @param {String} cssText The CSS text.\n       * @returns {StyleSheet} The style element.\n       */\n      function addStyleSheet(ownerDocument, cssText) {\n        var p = ownerDocument.createElement('p'),\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n        p.innerHTML = 'x<style>' + cssText + '</style>';\n        return parent.insertBefore(p.lastChild, parent.firstChild);\n      }\n\n      /**\n       * Returns the value of `html5.elements` as an array.\n       * @private\n       * @returns {Array} An array of shived element node names.\n       */\n      function getElements() {\n        var elements = html5.elements;\n        return typeof elements == 'string' ? elements.split(' ') : elements;\n      }\n\n      /**\n       * Extends the built-in list of html5 elements\n       * @memberOf html5\n       * @param {String|Array} newElements whitespace separated list or array of new element names to shiv\n       * @param {Document} ownerDocument The context document.\n       */\n      function addElements(newElements, ownerDocument) {\n        var elements = html5.elements;\n        if(typeof elements != 'string'){\n          elements = elements.join(' ');\n        }\n        if(typeof newElements != 'string'){\n          newElements = newElements.join(' ');\n        }\n        html5.elements = elements +' '+ newElements;\n        shivDocument(ownerDocument);\n      }\n\n      /**\n       * Returns the data associated to the given document\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Object} An object of data.\n       */\n      function getExpandoData(ownerDocument) {\n        var data = expandoData[ownerDocument[expando]];\n        if (!data) {\n          data = {};\n          expanID++;\n          ownerDocument[expando] = expanID;\n          expandoData[expanID] = data;\n        }\n        return data;\n      }\n\n      /**\n       * returns a shived element for the given nodeName and document\n       * @memberOf html5\n       * @param {String} nodeName name of the element\n       * @param {Document|DocumentFragment} ownerDocument The context document.\n       * @returns {Object} The shived element.\n       */\n      function createElement(nodeName, ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createElement(nodeName);\n        }\n        if (!data) {\n          data = getExpandoData(ownerDocument);\n        }\n        var node;\n\n        if (data.cache[nodeName]) {\n          node = data.cache[nodeName].cloneNode();\n        } else if (saveClones.test(nodeName)) {\n          node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n        } else {\n          node = data.createElem(nodeName);\n        }\n\n        // Avoid adding some elements to fragments in IE < 9 because\n        // * Attributes like `name` or `type` cannot be set/changed once an element\n        //   is inserted into a document/fragment\n        // * Link elements with `src` attributes that are inaccessible, as with\n        //   a 403 response, will cause the tab/window to crash\n        // * Script elements appended to fragments will execute when their `src`\n        //   or `text` property is set\n        return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n      }\n\n      /**\n       * returns a shived DocumentFragment for the given document\n       * @memberOf html5\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived DocumentFragment.\n       */\n      function createDocumentFragment(ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createDocumentFragment();\n        }\n        data = data || getExpandoData(ownerDocument);\n        var clone = data.frag.cloneNode(),\n          i = 0,\n          elems = getElements(),\n          l = elems.length;\n        for(;i<l;i++){\n          clone.createElement(elems[i]);\n        }\n        return clone;\n      }\n\n      /**\n       * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n       * @private\n       * @param {Document|DocumentFragment} ownerDocument The document.\n       * @param {Object} data of the document.\n       */\n      function shivMethods(ownerDocument, data) {\n        if (!data.cache) {\n          data.cache = {};\n          data.createElem = ownerDocument.createElement;\n          data.createFrag = ownerDocument.createDocumentFragment;\n          data.frag = data.createFrag();\n        }\n\n\n        ownerDocument.createElement = function(nodeName) {\n          //abort shiv\n          if (!html5.shivMethods) {\n            return data.createElem(nodeName);\n          }\n          return createElement(nodeName, ownerDocument, data);\n        };\n\n        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n                                                        'var n=f.cloneNode(),c=n.createElement;' +\n                                                        'h.shivMethods&&(' +\n                                                        // unroll the `createElement` calls\n                                                        getElements().join().replace(/[\\w\\-:]+/g, function(nodeName) {\n          data.createElem(nodeName);\n          data.frag.createElement(nodeName);\n          return 'c(\"' + nodeName + '\")';\n        }) +\n          ');return n}'\n                                                       )(html5, data.frag);\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivDocument(ownerDocument) {\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        var data = getExpandoData(ownerDocument);\n\n        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n          data.hasCSS = !!addStyleSheet(ownerDocument,\n                                        // corrects block display not defined in IE6/7/8/9\n                                        'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\n                                        // adds styling not present in IE6/7/8/9\n                                        'mark{background:#FF0;color:#000}' +\n                                        // hides non-rendered elements\n                                        'template{display:none}'\n                                       );\n        }\n        if (!supportsUnknownElements) {\n          shivMethods(ownerDocument, data);\n        }\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * The `html5` object is exposed so that more elements can be shived and\n       * existing shiving can be detected on iframes.\n       * @type Object\n       * @example\n       *\n       * // options can be changed before the script is included\n       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n       */\n      var html5 = {\n\n        /**\n         * An array or space separated string of node names of the elements to shiv.\n         * @memberOf html5\n         * @type Array|String\n         */\n        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\n\n        /**\n         * current version of html5shiv\n         */\n        'version': version,\n\n        /**\n         * A flag to indicate that the HTML5 style sheet should be inserted.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivCSS': (options.shivCSS !== false),\n\n        /**\n         * Is equal to true if a browser supports creating unknown/HTML5 elements\n         * @memberOf html5\n         * @type boolean\n         */\n        'supportsUnknownElements': supportsUnknownElements,\n\n        /**\n         * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n         * methods should be overwritten.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivMethods': (options.shivMethods !== false),\n\n        /**\n         * A string to describe the type of `html5` object (\"default\" or \"default print\").\n         * @memberOf html5\n         * @type String\n         */\n        'type': 'default',\n\n        // shivs the document according to the specified `html5` object options\n        'shivDocument': shivDocument,\n\n        //creates a shived element\n        createElement: createElement,\n\n        //creates a shived documentFragment\n        createDocumentFragment: createDocumentFragment,\n\n        //extends list of elements\n        addElements: addElements\n      };\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose html5\n      window.html5 = html5;\n\n      // shiv the document\n      shivDocument(document);\n\n      if(typeof module == 'object' && module.exports){\n        module.exports = html5;\n      }\n\n    }(typeof window !== \"undefined\" ? window : this, document));\n  }\n;\n\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n/*!\n{\n  \"name\": \"WebGL\",\n  \"property\": \"webgl\",\n  \"caniuse\": \"webgl\",\n  \"tags\": [\"webgl\", \"graphics\"],\n  \"polyfills\": [\"jebgl\", \"cwebgl\", \"iewebgl\"]\n}\n!*/\n\n  Modernizr.addTest('webgl', function() {\n    var canvas = createElement('canvas');\n    var supports = 'probablySupportsContext' in canvas ? 'probablySupportsContext' :  'supportsContext';\n    if (supports in canvas) {\n      return canvas[supports]('webgl') || canvas[supports]('experimental-webgl');\n    }\n    return 'WebGLRenderingContext' in window;\n  });\n\n\n  /**\n   * List of property values to set for css tests. See ticket #21\n   * http://git.io/vUGl4\n   *\n   * @memberof Modernizr\n   * @name Modernizr._prefixes\n   * @optionName Modernizr._prefixes\n   * @optionProp prefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._prefixes is the internal list of prefixes that we test against\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\n   * an array of kebab-case vendor prefixes you can use within your code.\n   *\n   * Some common use cases include\n   *\n   * Generating all possible prefixed version of a CSS property\n   * ```js\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\n   *\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\n   * ```\n   *\n   * Generating all possible prefixed version of a CSS value\n   * ```js\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\n   *\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\n   * ```\n   */\n\n  // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test\n  // values in feature detects to continue to work\n  var prefixes = (ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['','']);\n\n  // expose these for the plugin API. Look in the source for how to join() them against your input\n  ModernizrProto._prefixes = prefixes;\n\n\n/*!\n{\n  \"name\": \"CSS Calc\",\n  \"property\": \"csscalc\",\n  \"caniuse\": \"calc\",\n  \"tags\": [\"css\"],\n  \"builderAliases\": [\"css_calc\"],\n  \"authors\": [\"@calvein\"]\n}\n!*/\n/* DOC\nMethod of allowing calculated values for length units. For example:\n\n```css\n//lem {\n  width: calc(100% - 3em);\n}\n```\n*/\n\n  Modernizr.addTest('csscalc', function() {\n    var prop = 'width:';\n    var value = 'calc(10px);';\n    var el = createElement('a');\n\n    el.style.cssText = prop + prefixes.join(value + prop);\n\n    return !!el.style.length;\n  });\n\n/*!\n{\n  \"name\": \"CSS Gradients\",\n  \"caniuse\": \"css-gradients\",\n  \"property\": \"cssgradients\",\n  \"tags\": [\"css\"],\n  \"knownBugs\": [\"False-positives on webOS (https://github.com/Modernizr/Modernizr/issues/202)\"],\n  \"notes\": [{\n    \"name\": \"Webkit Gradient Syntax\",\n    \"href\": \"https://webkit.org/blog/175/introducing-css-gradients/\"\n  },{\n    \"name\": \"Linear Gradient Syntax\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient\"\n  },{\n    \"name\": \"W3C Gradient Spec\",\n    \"href\": \"https://drafts.csswg.org/css-images-3/#gradients\"\n  }]\n}\n!*/\n\n\n  Modernizr.addTest('cssgradients', function() {\n\n    var str1 = 'background-image:';\n    var str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));';\n    var css = '';\n    var angle;\n\n    for (var i = 0, len = prefixes.length - 1; i < len; i++) {\n      angle = (i === 0 ? 'to ' : '');\n      css += str1 + prefixes[i] + 'linear-gradient(' + angle + 'left top, #9f9, white);';\n    }\n\n    if (Modernizr._config.usePrefixes) {\n    // legacy webkit syntax (FIXME: remove when syntax not in use anymore)\n      css += str1 + '-webkit-' + str2;\n    }\n\n    var elem = createElement('a');\n    var style = elem.style;\n    style.cssText = css;\n\n    // IE6 returns undefined so cast to string\n    return ('' + style.backgroundImage).indexOf('gradient') > -1;\n  });\n\n/*!\n{\n  \"name\": \"CSS Supports\",\n  \"property\": \"supports\",\n  \"caniuse\": \"css-featurequeries\",\n  \"tags\": [\"css\"],\n  \"builderAliases\": [\"css_supports\"],\n  \"notes\": [{\n    \"name\": \"W3 Spec\",\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#at-supports\"\n  },{\n    \"name\": \"Related Github Issue\",\n    \"href\": \"github.com/Modernizr/Modernizr/issues/648\"\n  },{\n    \"name\": \"W3 Info\",\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#the-csssupportsrule-interface\"\n  }]\n}\n!*/\n\n  var newSyntax = 'CSS' in window && 'supports' in window.CSS;\n  var oldSyntax = 'supportsCSS' in window;\n  Modernizr.addTest('supports', newSyntax || oldSyntax);\n\n\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   */\n\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if (body.fake) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n\n  }\n\n  ;\n\n  /**\n   * testStyles injects an element with style element and some CSS rules\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testStyles\n   * @optionName Modernizr.testStyles()\n   * @optionProp testStyles\n   * @access public\n   * @function testStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   * @example\n   *\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\n   * along with (possibly multiple) DOM elements. This lets you check for features\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\n   *   // elem is the first DOM node in the page (by default #modernizr)\n   *   // rule is the first argument you supplied - the CSS rule in string form\n   *\n   *   addTest('widthworks', elem.style.width === '9px')\n   * });\n   * ```\n   *\n   * If your test requires multiple nodes, you can include a third argument\n   * indicating how many additional div elements to include on the page. The\n   * additional nodes are injected as children of the `elem` that is returned as\n   * the first argument to the callback.\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\n   *   document.getElementById('modernizr').style.width === '1px'; // true\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\n   * }, 1);\n   * ```\n   *\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\n   * the second additional is `#modernizr3`, etc.).\n   * If you want to have more meaningful IDs for your function, you can provide\n   * them as the fourth argument, as an array of strings\n   *\n   * ```js\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\n   *   elem.firstChild === document.getElementById('foo'); // true\n   *   elem.lastChild === document.getElementById('bar'); // true\n   * }, 2, ['foo', 'bar']);\n   * ```\n   *\n   */\n\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n\n\n  /**\n   * If the browsers follow the spec, then they would expose vendor-specific style as:\n   *   elem.style.WebkitBorderRadius\n   * instead of something like the following, which would be technically incorrect:\n   *   elem.style.webkitBorderRadius\n\n   * Webkit ghosts their properties in lowercase but Opera & Moz do not.\n   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n   *   erik.eae.net/archives/2008/03/10/21.48.10/\n\n   * More here: github.com/Modernizr/Modernizr/issues/issue/21\n   *\n   * @access private\n   * @returns {string} The string representing the vendor-specific style properties\n   */\n\n  var omPrefixes = 'Moz O ms Webkit';\n\n\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\n\n\n  /**\n   * List of JavaScript DOM values used for tests\n   *\n   * @memberof Modernizr\n   * @name Modernizr._domPrefixes\n   * @optionName Modernizr._domPrefixes\n   * @optionProp domPrefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\n   * than kebab-case properties, all properties are their Capitalized variant\n   *\n   * ```js\n   * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\n   * ```\n   */\n\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\n  ModernizrProto._domPrefixes = domPrefixes;\n\n\n\n  /**\n   * contains checks to see if a string contains another string\n   *\n   * @access private\n   * @function contains\n   * @param {string} str - The string we want to check for substrings\n   * @param {string} substr - The substring we want to search the first string for\n   * @returns {boolean}\n   */\n\n  function contains(str, substr) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  ;\n\n  /**\n   * cssToDOM takes a kebab-case string and converts it to camelCase\n   * e.g. box-sizing -> boxSizing\n   *\n   * @access private\n   * @function cssToDOM\n   * @param {string} name - String name of kebab-case prop we want to convert\n   * @returns {string} The camelCase version of the supplied name\n   */\n\n  function cssToDOM(name) {\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n  ;\n\n  /**\n   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\n   *\n   * @access private\n   * @function fnBind\n   * @param {function} fn - a function you want to change `this` reference to\n   * @param {object} that - the `this` you want to call the function with\n   * @returns {function} The wrapped version of the supplied function\n   */\n\n  function fnBind(fn, that) {\n    return function() {\n      return fn.apply(that, arguments);\n    };\n  }\n\n  ;\n\n  /**\n   * testDOMProps is a generic DOM property test; if a browser supports\n   *   a certain property, it won't return undefined for it.\n   *\n   * @access private\n   * @function testDOMProps\n   * @param {array.<string>} props - An array of properties to test for\n   * @param {object} obj - An object or Element you want to use to test the parameters again\n   * @param {boolean|object} elem - An Element to bind the property lookup again. Use `false` to prevent the check\n   */\n  function testDOMProps(props, obj, elem) {\n    var item;\n\n    for (var i in props) {\n      if (props[i] in obj) {\n\n        // return the property name as a string\n        if (elem === false) {\n          return props[i];\n        }\n\n        item = obj[props[i]];\n\n        // let's bind a function\n        if (is(item, 'function')) {\n          // bind to obj unless overriden\n          return fnBind(item, elem || obj);\n        }\n\n        // return the unbound function or obj or value\n        return item;\n      }\n    }\n    return false;\n  }\n\n  ;\n\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   *\n   * @access private\n   */\n\n  var modElem = {\n    elem: createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function() {\n    delete modElem.elem;\n  });\n\n\n\n  var mStyle = {\n    style: modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function() {\n    delete mStyle.style;\n  });\n\n\n\n  /**\n   * domToCSS takes a camelCase string and converts it to kebab-case\n   * e.g. boxSizing -> box-sizing\n   *\n   * @access private\n   * @function domToCSS\n   * @param {string} name - String name of camelCase prop we want to convert\n   * @returns {string} The kebab-case version of the supplied name\n   */\n\n  function domToCSS(name) {\n    return name.replace(/([A-Z])/g, function(str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n  ;\n\n  /**\n   * nativeTestProps allows for us to use native feature detection functionality if available.\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @access private\n   * @function nativeTestProps\n   * @param {array} props - An array of property names\n   * @param {string} value - A string representing the value we want to check via @supports\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n   */\n\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps(props, value) {\n    var i = props.length;\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n      // Build a condition string for every prefixed variant\n      var conditionText = [];\n      while (i--) {\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n      }\n      conditionText = conditionText.join(' or ');\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\n        return getComputedStyle(node, null).position == 'absolute';\n      });\n    }\n    return undefined;\n  }\n  ;\n\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or kebab-case.\n\n  function testProps(props, prefixed, value, skipValueTest) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if (!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use\n\n    // inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    var elems = ['modernizr', 'tspan'];\n    while (!mStyle.style) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for (i = 0; i < propsLength; i++) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if (mStyle.style[prop] !== undefined) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] != before) {\n            cleanElems();\n            return prefixed == 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n          cleanElems();\n          return prefixed == 'pfx' ? prop : true;\n        }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  ;\n\n  /**\n   * testPropsAll tests a list of DOM properties we want to check against.\n   * We specify literally ALL possible (known and/or likely) properties on\n   * the element including the non-vendor prefixed one, for forward-\n   * compatibility.\n   *\n   * @access private\n   * @function testPropsAll\n   * @param {string} prop - A string of the property to test for\n   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\n   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\n   * @param {string} [value] - A string of a css value\n   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\n   */\n  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\n\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n    props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\n    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\n      return testProps(props, prefixed, value, skipValueTest);\n\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n    } else {\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n      return testDOMProps(props, prefixed, elem);\n    }\n  }\n\n  // Modernizr.testAllProps() investigates whether a given style property,\n  // or any of its vendor-prefixed variants, is recognized\n  //\n  // Note that the property names must be provided in the camelCase variant.\n  // Modernizr.testAllProps('boxSizing')\n  ModernizrProto.testAllProps = testPropsAll;\n\n\n\n  /**\n   * testAllProps determines whether a given CSS property is supported in the browser\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testAllProps\n   * @optionName Modernizr.testAllProps()\n   * @optionProp testAllProps\n   * @access public\n   * @function testAllProps\n   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)\n   * @param {string} [value] - String of the value to test\n   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\n   * @example\n   *\n   * testAllProps determines whether a given CSS property, in some prefixed form,\n   * is supported by the browser.\n   *\n   * ```js\n   * testAllProps('boxSizing')  // true\n   * ```\n   *\n   * It can optionally be given a CSS value in string form to test if a property\n   * value is valid\n   *\n   * ```js\n   * testAllProps('display', 'block') // true\n   * testAllProps('display', 'penguin') // false\n   * ```\n   *\n   * A boolean can be passed as a third parameter to skip the value check when\n   * native detection (@supports) isn't available.\n   *\n   * ```js\n   * testAllProps('shapeOutside', 'content-box', true);\n   * ```\n   */\n\n  function testAllProps(prop, value, skipValueTest) {\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n  }\n  ModernizrProto.testAllProps = testAllProps;\n\n/*!\n{\n  \"name\": \"CSS Animations\",\n  \"property\": \"cssanimations\",\n  \"caniuse\": \"css-animation\",\n  \"polyfills\": [\"transformie\", \"csssandpaper\"],\n  \"tags\": [\"css\"],\n  \"warnings\": [\"Android < 4 will pass this test, but can only animate a single property at a time\"],\n  \"notes\": [{\n    \"name\" : \"Article: 'Dispelling the Android CSS animation myths'\",\n    \"href\": \"https://goo.gl/OGw5Gm\"\n  }]\n}\n!*/\n/* DOC\nDetects whether or not elements can be animated using CSS\n*/\n\n  Modernizr.addTest('cssanimations', testAllProps('animationName', 'a', true));\n\n/*!\n{\n  \"name\": \"CSS Transforms 3D\",\n  \"property\": \"csstransforms3d\",\n  \"caniuse\": \"transforms3d\",\n  \"tags\": [\"css\"],\n  \"warnings\": [\n    \"Chrome may occassionally fail this test on some systems; more info: https://code.google.com/p/chromium/issues/detail?id=129004\"\n  ]\n}\n!*/\n\n  Modernizr.addTest('csstransforms3d', function() {\n    var ret = !!testAllProps('perspective', '1px', true);\n    var usePrefix = Modernizr._config.usePrefixes;\n\n    // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n    //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n    //   some conditions. As a result, Webkit typically recognizes the syntax but\n    //   will sometimes throw a false positive, thus we must do a more thorough check:\n    if (ret && (!usePrefix || 'webkitPerspective' in docElement.style)) {\n      var mq;\n      var defaultStyle = '#modernizr{width:0;height:0}';\n      // Use CSS Conditional Rules if available\n      if (Modernizr.supports) {\n        mq = '@supports (perspective: 1px)';\n      } else {\n        // Otherwise, Webkit allows this media query to succeed only if the feature is enabled.\n        // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n        mq = '@media (transform-3d)';\n        if (usePrefix) {\n          mq += ',(-webkit-transform-3d)';\n        }\n      }\n\n      mq += '{#modernizr{width:7px;height:18px;margin:0;padding:0;border:0}}';\n\n      testStyles(defaultStyle + mq, function(elem) {\n        ret = elem.offsetWidth === 7 && elem.offsetHeight === 18;\n      });\n    }\n\n    return ret;\n  });\n\n\n  // Run each test\n  testRunner();\n\n  // Remove the \"no-js\" class if it exists\n  setClasses(classes);\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n\n;\n\n})(window, document);\n","import sono from 'sono';\n\nclass Xp {\n\n    constructor() {\n\n        console.log(sono);\n\n\n\n        this.draw = this.draw.bind(this);\n        this.events = this.events.bind(this);\n        this.changeFtt = this.changeFtt.bind(this);\n\n\n\n        this.init();\n\n\n    }\n\n    init() {\n\n        window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||\n            window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n        this.audioCtx = new(window.AudioContext || window.webkitAudioContext)(); // définition du contexte audio\n\n        this.myAudio = document.querySelector('audio');\n        this.frequencyB = document.querySelector('.frequency .block');\n        this.amplitudeB = document.querySelector('.amplitude .block');\n        this.waveFormB = document.querySelector('.waveForm .block');\n        this.ptichB = document.querySelector('.pitch .block');\n\n        this.formFtt = document.querySelector('.fttSize');\n\n        // init\n\n        this.analyser = this.audioCtx.createAnalyser();\n\n        var source = this.audioCtx.createMediaElementSource(this.myAudio);\n        source.connect(this.analyser);\n        this.analyser.connect(this.audioCtx.destination);\n\n\n        this.analyser.fftSize = this.formFtt.value;\n        //  Longueur des fréquences !!!\n        this.bufferLength = this.analyser.frequencyBinCount;\n        // Tableaux des intensités !!\n        this.dataArray = new Uint8Array(this.bufferLength);\n\n        this.analyser.getByteTimeDomainData(this.dataArray);\n\n        this.canvas = document.querySelector('.canvas');\n        this.canvas.width = 1400;\n        this.canvas.height = 200;\n\n        this.canvasCtx = this.canvas.getContext('2d');\n\n        this.canvasCtx.clearRect(0, 0, 500, 500);\n\n        console.log(this.bufferLength);\n\n\n        // Drawing code goes here\n\n        this.events();\n\n        this.draw();\n\n\n    }\n\n    events() {\n\n        this.formFtt.addEventListener('change', this.changeFtt);\n\n    }\n\n    changeFtt(e) {\n        this.analyser.fftSize = this.formFtt.value;\n        // Longueur des fréquences !!!\n        this.bufferLength = this.analyser.frequencyBinCount;\n        // Tableaux des intensités !!\n        this.dataArray = new Uint8Array(this.bufferLength);\n\n        this.analyser.getByteTimeDomainData(this.dataArray);\n    }\n\n    draw() {\n\n        requestAnimationFrame(this.draw);\n\n        this.analyser.getByteFrequencyData(this.dataArray);\n        // .getByteFrequencyData()\n        // .getByteTimeDomainData()\n        this.canvasCtx.fillStyle = 'rgb(0, 0, 0)';\n        this.canvasCtx.fillRect(0, 0, this.canvas.width, 500);\n\n        var barWidth = (500 / this.bufferLength) * 2.5;\n        var barHeight;\n        var x = 0;\n\n        for (var i = 0; i < this.bufferLength; i++) {\n            barHeight = this.dataArray[i] / 2;\n\n            var hue = i / this.analyser.frequencyBinCount * 360;\n            this.canvasCtx.fillStyle = 'hsl(' + hue + ', 100%, 50%)';\n            // this.canvasCtx.fillStyle = 'rgb(' + (barHeight + 100) + ',' + (barHeight + 100) + ',50)';\n            this.canvasCtx.fillRect(x, this.canvas.height - barHeight / 2, barWidth, barHeight);\n\n            x += barWidth + 1;\n        }\n\n        // this.canvasCtx.lineTo(this.canvas.width, this.canvas.height / 2);\n        // this.canvasCtx.stroke();\n\n    }\n\n\n}\n\n\nexport default new Xp();\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.sono = factory());\n}(this, (function () { 'use strict';\n\nvar browser = {};\n\nbrowser.handlePageVisibility = function (onHidden, onShown) {\n    var hidden = void 0,\n        visibilityChange = void 0;\n\n    if (typeof document.hidden !== 'undefined') {\n        hidden = 'hidden';\n        visibilityChange = 'visibilitychange';\n    } else if (typeof document.mozHidden !== 'undefined') {\n        hidden = 'mozHidden';\n        visibilityChange = 'mozvisibilitychange';\n    } else if (typeof document.msHidden !== 'undefined') {\n        hidden = 'msHidden';\n        visibilityChange = 'msvisibilitychange';\n    } else if (typeof document.webkitHidden !== 'undefined') {\n        hidden = 'webkitHidden';\n        visibilityChange = 'webkitvisibilitychange';\n    }\n\n    function onChange() {\n        if (document[hidden]) {\n            onHidden();\n        } else {\n            onShown();\n        }\n    }\n\n    if (typeof visibilityChange !== 'undefined') {\n        document.addEventListener(visibilityChange, onChange, false);\n    }\n};\n\nbrowser.handleTouchLock = function (context, onUnlock) {\n    var ua = navigator.userAgent,\n        locked = !!ua.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|SymbianOS/i);\n\n    function unlock() {\n        if (context && context.state === 'suspended') {\n            context.resume().then(function () {\n                var buffer = context.createBuffer(1, 1, 44100);\n                var source = context.createBufferSource();\n                source.buffer = buffer;\n                source.connect(context.destination);\n                source.start(0);\n                source.stop(0);\n                source.disconnect();\n\n                document.body.removeEventListener('touchend', unlock);\n                onUnlock();\n            });\n        } else {\n            document.body.removeEventListener('touchend', unlock);\n            onUnlock();\n        }\n    }\n\n    if (locked) {\n        document.body.addEventListener('touchend', unlock, false);\n    }\n\n    return locked;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\nvar get$1 = function get$1(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get$1(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n\nvar set$1 = function set$1(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set$1(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nvar extensions = [];\nvar canPlay = {};\n\n/*\n * Initial tests\n */\n\nvar tests = [{\n    ext: 'ogg',\n    type: 'audio/ogg; codecs=\"vorbis\"'\n}, {\n    ext: 'mp3',\n    type: 'audio/mpeg;'\n}, {\n    ext: 'opus',\n    type: 'audio/ogg; codecs=\"opus\"'\n}, {\n    ext: 'wav',\n    type: 'audio/wav; codecs=\"1\"'\n}, {\n    ext: 'm4a',\n    type: 'audio/x-m4a;'\n}, {\n    ext: 'm4a',\n    type: 'audio/aac;'\n}];\n\nvar el = document.createElement('audio');\nif (el) {\n    tests.forEach(function (test) {\n        var canPlayType = !!el.canPlayType(test.type);\n        if (canPlayType && extensions.indexOf(test.ext) === -1) {\n            extensions.push(test.ext);\n        }\n        canPlay[test.ext] = canPlayType;\n    });\n    el = null;\n}\n\n/*\n * find a supported file\n */\n\nfunction getFileExtension(url) {\n    if (typeof url !== 'string') {\n        return '';\n    }\n    // from DataURL\n    if (url.slice(0, 5) === 'data:') {\n        var match = url.match(/data:audio\\/(ogg|mp3|opus|wav|m4a)/i);\n        if (match && match.length > 1) {\n            return match[1].toLowerCase();\n        }\n    }\n    // from Standard URL\n    url = url.split('?')[0];\n    url = url.slice(url.lastIndexOf('/') + 1);\n\n    var a = url.split('.');\n    if (a.length === 1 || a[0] === '' && a.length === 2) {\n        return '';\n    }\n    return a.pop().toLowerCase();\n}\n\nfunction getSupportedFile(fileNames) {\n    var name = void 0;\n\n    if (Array.isArray(fileNames)) {\n        // if array get the first one that works\n        for (var i = 0; i < fileNames.length; i++) {\n            name = fileNames[i];\n            var ext = getFileExtension(name);\n            if (extensions.indexOf(ext) > -1) {\n                break;\n            }\n        }\n    } else if ((typeof fileNames === 'undefined' ? 'undefined' : _typeof(fileNames)) === 'object') {\n        // if not array and is object\n        Object.keys(fileNames).some(function (key) {\n            name = fileNames[key];\n            var ext = getFileExtension(name);\n            return extensions.indexOf(ext) > -1;\n        });\n    }\n    // if string just return\n    return name || fileNames;\n}\n\n/*\n * infer file types\n */\n\nfunction isAudioBuffer(data) {\n    return !!(data && window.AudioBuffer && data instanceof window.AudioBuffer);\n}\n\nfunction isArrayBuffer(data) {\n    return !!(data && window.ArrayBuffer && data instanceof window.ArrayBuffer);\n}\n\nfunction isMediaElement(data) {\n    return !!(data && window.HTMLMediaElement && data instanceof window.HTMLMediaElement);\n}\n\nfunction isMediaStream(data) {\n    return !!(data && typeof data.getAudioTracks === 'function' && data.getAudioTracks().length && window.MediaStreamTrack && data.getAudioTracks()[0] instanceof window.MediaStreamTrack);\n}\n\nfunction isOscillatorType(data) {\n    return !!(data && typeof data === 'string' && (data === 'sine' || data === 'square' || data === 'sawtooth' || data === 'triangle'));\n}\n\nfunction isScriptConfig(data) {\n    return !!(data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && data.bufferSize && data.channels && data.callback);\n}\n\nfunction isURL(data) {\n    return !!(data && typeof data === 'string' && (data.indexOf('.') > -1 || data.slice(0, 5) === 'data:'));\n}\n\nfunction containsURL(config) {\n    if (!config || isMediaElement(config)) {\n        return false;\n    }\n    // string, array or object with src/url/data property that is string, array or arraybuffer\n    var src = config.src || config.url || config.data || config;\n    return isURL(src) || isArrayBuffer(src) || Array.isArray(src) && isURL(src[0]);\n}\n\nvar file = {\n    canPlay: canPlay,\n    containsURL: containsURL,\n    extensions: extensions,\n    getFileExtension: getFileExtension,\n    getSupportedFile: getSupportedFile,\n    isAudioBuffer: isAudioBuffer,\n    isMediaElement: isMediaElement,\n    isMediaStream: isMediaStream,\n    isOscillatorType: isOscillatorType,\n    isScriptConfig: isScriptConfig,\n    isURL: isURL\n};\n\nfunction Analyser(context, config) {\n    config = config || {};\n\n    var node = context.createAnalyser();\n\n    var fftSize = config.fftSize || 512,\n        freqFloat = !!config.float,\n        waveFloat = !!config.float,\n        waveform = void 0,\n        frequencies = void 0;\n\n    node.fftSize = fftSize; // frequencyBinCount will be half this value\n    node.smoothingTimeConstant = config.smoothing || config.smoothingTimeConstant || node.smoothingTimeConstant;\n    node.minDecibels = config.minDecibels || node.minDecibels;\n    node.maxDecibels = config.maxDecibels || node.maxDecibels;\n\n    //the worker returns a normalized value\n    //first a sum of all magnitudes devided by the byteLength, then devide  by half the fft (1channel)\n    var amplitudeBlob = new Blob(['onmessage=function(e){var data=e.data;var f=new Float32Array(data.b);for(var i=0;i<f.length;i++){data.sum+=f[i]}data.sum/=f.length;postMessage(Math.max(1.0-(data.sum/data.numSamples*-1.0),0))};']);\n    var pitchBlob = new Blob(['onmessage=function(e){var data=e.data;var sampleRate=data.sampleRate;var buf=new Float32Array(data.b);var SIZE=buf.length;var MAX_SAMPLES=Math.floor(SIZE/2);var best_offset=-1;var best_correlation=0;var rms=0;var foundGoodCorrelation=false;var correlations=new Array(MAX_SAMPLES);for(var i=0;i<SIZE;i++){var val=buf[i];rms+=val*val}rms=Math.sqrt(rms/SIZE);if (rms<0.01){postMessage(-1)}else{var lastCorrelation=1;for(var offset=0;offset<MAX_SAMPLES;offset++){var correlation=0;for(var i=0;i<MAX_SAMPLES;i++){correlation+=Math.abs((buf[i])-(buf[i+offset]))}correlation=1-(correlation/MAX_SAMPLES);correlations[offset]=correlation;if ((correlation>0.9)&&(correlation>lastCorrelation)){foundGoodCorrelation=true;if (correlation>best_correlation){best_correlation=correlation;best_offset=offset}}else if (foundGoodCorrelation){var shift=(correlations[best_offset+1]-correlations[best_offset-1])/correlations[best_offset];postMessage(sampleRate/(best_offset+(8*shift)))}lastCorrelation=correlation}if (best_correlation>0.01){postMessage(sampleRate/best_offset)}else{postMessage(-1)}}};']);\n    var amplitudeBlobURL = URL.createObjectURL(amplitudeBlob);\n    var amplitudeWorker = new Worker(amplitudeBlobURL);\n    var pitchBlobURL = URL.createObjectURL(pitchBlob);\n    var pitchWorker = new Worker(pitchBlobURL);\n\n    var amplitudeCallback = null;\n    var noteStrings = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    var pitchCallback = null;\n    var pitchCallbackObject = {\n        hertz: null, //number\n        note: null, //string\n        noteIndex: null, //int\n        detuneCents: null, //number\n        detune: null //string\n    };\n\n    function noteFromPitch(frequency) {\n        var noteNum = 12 * (Math.log(frequency / 440) / Math.log(2));\n        return Math.round(noteNum) + 69;\n    }\n\n    function frequencyFromNoteNumber(note) {\n        return 440 * Math.pow(2, (note - 69) / 12);\n    }\n\n    function centsOffFromPitch(frequency, note) {\n        return Math.floor(1200 * Math.log(frequency / frequencyFromNoteNumber(note)) / Math.log(2));\n    }\n\n    amplitudeWorker.onmessage = function (e) {\n        if (amplitudeCallback) {\n            amplitudeCallback(e.data);\n        }\n    };\n\n    pitchWorker.onmessage = function (e) {\n        if (pitchCallback) {\n            var Hz = e.data;\n            if (Hz !== -1) {\n                var note = noteFromPitch(Hz);\n                var detune = centsOffFromPitch(Hz, note);\n                pitchCallbackObject.hertz = Hz;\n                pitchCallbackObject.noteIndex = note % 12;\n                pitchCallbackObject.note = noteStrings[note % 12];\n                pitchCallbackObject.detuneCents = detune;\n                if (detune === 0) {\n                    pitchCallbackObject.detune = '';\n                } else if (detune < 0) {\n                    pitchCallbackObject.detune = 'flat';\n                } else {\n                    pitchCallbackObject.detune = 'sharp';\n                }\n            }\n            pitchCallback(pitchCallbackObject);\n        }\n    };\n\n    function needsUpdate(arr, float) {\n        if (!arr) {\n            return true;\n        }\n        if (node.fftSize !== fftSize) {\n            return true;\n        }\n        if (float && arr instanceof Uint8Array) {\n            return true;\n        }\n        return !float && arr instanceof Float32Array;\n    }\n\n    function createArray(float, length) {\n        return float ? new Float32Array(length) : new Uint8Array(length);\n    }\n\n    node.getWaveform = function (float) {\n        if (!arguments.length) {\n            float = waveFloat;\n        }\n\n        if (needsUpdate(waveform, float)) {\n            fftSize = node.fftSize;\n            waveFloat = float;\n            waveform = createArray(float, fftSize);\n        }\n        if (float && this.getFloatTimeDomainData) {\n            this.getFloatTimeDomainData(waveform);\n        } else {\n            this.getByteTimeDomainData(waveform);\n        }\n\n        return waveform;\n    };\n\n    node.getPitch = function (callback) {\n        pitchCallback = pitchCallback || callback;\n        var f = new Float32Array(node.fftSize);\n        f.set(node.getWaveform(true));\n        pitchWorker.postMessage({\n            sampleRate: context.sampleRate,\n            b: f.buffer\n        }, [f.buffer]);\n    };\n\n    node.getFrequencies = function (float) {\n        if (!arguments.length) {\n            float = freqFloat;\n        }\n\n        if (needsUpdate(frequencies, float)) {\n            fftSize = node.fftSize;\n            freqFloat = float;\n            frequencies = createArray(float, node.frequencyBinCount);\n        }\n\n        if (float) {\n            this.getFloatFrequencyData(frequencies);\n        } else {\n            this.getByteFrequencyData(frequencies);\n        }\n\n        return frequencies;\n    };\n\n    node.getAmplitude = function (callback) {\n        amplitudeCallback = amplitudeCallback || callback;\n        var f = new Float32Array(node.fftSize);\n        f.set(node.getFrequencies(true));\n        amplitudeWorker.postMessage({\n            sum: 0,\n            length: f.byteLength,\n            numSamples: node.fftSize / 2,\n            b: f.buffer\n        }, [f.buffer]);\n    };\n\n    node.update = function () {\n        node.getWaveform();\n        node.getFrequencies();\n    };\n\n    Object.defineProperties(node, {\n        smoothing: {\n            get: function get() {\n                return node.smoothingTimeConstant;\n            },\n            set: function set(value) {\n                node.smoothingTimeConstant = value;\n            }\n        }\n    });\n\n    return node;\n}\n\nfunction number(value, defaultValue) {\n    if (arguments.length < 2) {\n        defaultValue = 0;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n        return defaultValue;\n    }\n    return value;\n}\n\nvar n = 22050;\n\nfunction Distortion(context, amount) {\n\n    amount = number(amount, 1);\n\n    var node = context.createWaveShaper();\n    var curve = new Float32Array(n);\n\n    // create waveShaper distortion curve from 0 to 1\n    node.update = function (value) {\n        amount = value;\n        if (amount <= 0) {\n            amount = 0;\n            this.curve = null;\n            return;\n        }\n        var k = value * 100;\n        var deg = Math.PI / 180;\n        var x = void 0;\n\n        for (var i = 0; i < n; i++) {\n            x = i * 2 / n - 1;\n            curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n        }\n\n        this.curve = curve;\n    };\n\n    Object.defineProperties(node, {\n        amount: {\n            get: function get() {\n                return amount;\n            },\n            set: function set(value) {\n                this.update(value);\n            }\n        }\n    });\n\n    if (typeof amount !== 'undefined') {\n        node.update(amount);\n    }\n\n    return node;\n}\n\nfunction Echo(context, config) {\n    config = config || {};\n\n    var input = context.createGain();\n    var delay = context.createDelay();\n    var gain = context.createGain();\n    var output = context.createGain();\n\n    delay.delayTime.value = number(config.delayTime, 0.5);\n    gain.gain.value = number(config.feedback, 0.5);\n\n    input.connect(delay);\n    input.connect(output);\n    delay.connect(gain);\n    gain.connect(delay);\n    gain.connect(output);\n\n    var node = input;\n    node.name = 'Echo';\n    node._output = output;\n\n    Object.defineProperties(node, {\n        delay: {\n            get: function get() {\n                return delay.delayTime.value;\n            },\n            set: function set(value) {\n                delay.delayTime.value = value;\n            }\n        },\n        feedback: {\n            get: function get() {\n                return gain.gain.value;\n            },\n            set: function set(value) {\n                gain.gain.value = value;\n            }\n        }\n    });\n\n    return node;\n}\n\nfunction FakeContext() {\n\n    var startTime = Date.now();\n\n    function fn() {}\n\n    function param() {\n        return {\n            value: 1,\n            defaultValue: 1,\n            linearRampToValueAtTime: fn,\n            setValueAtTime: fn,\n            exponentialRampToValueAtTime: fn,\n            setTargetAtTime: fn,\n            setValueCurveAtTime: fn,\n            cancelScheduledValues: fn\n        };\n    }\n\n    function fakeNode() {\n        return {\n            connect: fn,\n            disconnect: fn,\n            // analyser\n            frequencyBinCount: 0,\n            smoothingTimeConstant: 0,\n            fftSize: 0,\n            minDecibels: 0,\n            maxDecibels: 0,\n            getByteTimeDomainData: fn,\n            getByteFrequencyData: fn,\n            getFloatTimeDomainData: fn,\n            getFloatFrequencyData: fn,\n            // gain\n            gain: param(),\n            // panner\n            panningModel: 0,\n            setPosition: fn,\n            setOrientation: fn,\n            setVelocity: fn,\n            distanceModel: 0,\n            refDistance: 0,\n            maxDistance: 0,\n            rolloffFactor: 0,\n            coneInnerAngle: 360,\n            coneOuterAngle: 360,\n            coneOuterGain: 0,\n            // filter:\n            type: 0,\n            frequency: param(),\n            Q: param(),\n            detune: param(),\n            // delay\n            delayTime: param(),\n            // convolver\n            buffer: 0,\n            // compressor\n            threshold: param(),\n            knee: param(),\n            ratio: param(),\n            attack: param(),\n            release: param(),\n            reduction: param(),\n            // distortion\n            oversample: 0,\n            curve: 0,\n            // buffer\n            sampleRate: 1,\n            length: 0,\n            duration: 0,\n            numberOfChannels: 0,\n            getChannelData: function getChannelData() {\n                return [];\n            },\n            copyFromChannel: fn,\n            copyToChannel: fn,\n            // listener\n            dopplerFactor: 0,\n            speedOfSound: 0,\n            // osc\n            start: fn\n        };\n    }\n\n    // ie9\n    if (!window.Uint8Array) {\n        window.Uint8Array = window.Float32Array = Array;\n    }\n\n    return {\n        createAnalyser: fakeNode,\n        createBuffer: fakeNode,\n        createBiquadFilter: fakeNode,\n        createChannelMerger: fakeNode,\n        createChannelSplitter: fakeNode,\n        createDynamicsCompressor: fakeNode,\n        createConvolver: fakeNode,\n        createDelay: fakeNode,\n        createGain: fakeNode,\n        createOscillator: fakeNode,\n        createPanner: fakeNode,\n        createScriptProcessor: fakeNode,\n        createWaveShaper: fakeNode,\n        listener: fakeNode(),\n        get currentTime() {\n            return (Date.now() - startTime) / 1000;\n        }\n    };\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\n// For lowpass and highpass Q indicates how peaked the frequency is around the cutoff.\n// The greater the value is, the greater is the peak\n\nfunction Filter(context) {\n    var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    // Frequency between 40Hz and half of the sampling rate\n    var minFrequency = 40;\n    var maxFrequency = context.sampleRate / 2;\n\n    var node = context.createBiquadFilter();\n    node.type = config.type;\n\n    function getFrequency(value) {\n        // Logarithm (base 2) to compute how many octaves fall in the range.\n        var numberOfOctaves = Math.log(maxFrequency / minFrequency) / Math.LN2;\n        // Compute a multiplier from 0 to 1 based on an exponential scale.\n        var multiplier = Math.pow(2, numberOfOctaves * (value - 1.0));\n        // Get back to the frequency value between min and max.\n        return maxFrequency * multiplier;\n    }\n\n    node.set = function (frequency, q, gain) {\n        if (typeof frequency !== 'undefined' && typeof frequency === 'number') {\n            node.frequency.value = frequency;\n        }\n        if (typeof q !== 'undefined' && typeof q === 'number') {\n            node.Q.value = q;\n        }\n        if (typeof gain !== 'undefined' && typeof gain === 'number') {\n            node.gain.value = gain;\n        }\n        return node;\n    };\n\n    // set filter frequency based on value from 0 to 1\n    node.setByPercent = function (percent, q, gain) {\n        return node.set(getFrequency(percent), q, gain);\n    };\n\n    return node.set(config.frequency, config.q, config.gain);\n}\n\nfunction MonoFlanger(context, config) {\n    var input = context.createGain();\n    var delay = context.createDelay();\n    var feedback = context.createGain();\n    var lfo = context.createOscillator();\n    var gain = context.createGain();\n    var output = context.createGain();\n\n    delay.delayTime.value = number(config.delay, 0.005); // 5-25ms delay (0.005 > 0.025)\n    feedback.gain.value = number(config.feedback, 0.5); // 0 > 1\n\n    lfo.type = 'sine';\n    lfo.frequency.value = number(config.frequency, 0.002); // 0.05 > 5\n    gain.gain.value = number(config.gain, 0.25); // 0.0005 > 0.005\n\n    input.connect(output);\n    input.connect(delay);\n    delay.connect(output);\n    delay.connect(feedback);\n    feedback.connect(input);\n\n    lfo.connect(gain);\n    gain.connect(delay.delayTime);\n    lfo.start(0);\n\n    var node = input;\n    node.name = 'Flanger';\n    node._output = output;\n\n    Object.defineProperties(node, {\n        delay: {\n            get: function get() {\n                return delay.delayTime.value;\n            },\n            set: function set(value) {\n                delay.delayTime.value = value;\n            }\n        },\n        lfoFrequency: {\n            get: function get() {\n                return lfo.frequency.value;\n            },\n            set: function set(value) {\n                lfo.frequency.value = value;\n            }\n        },\n        lfoGain: {\n            get: function get() {\n                return gain.gain.value;\n            },\n            set: function set(value) {\n                gain.gain.value = value;\n            }\n        },\n        feedback: {\n            get: function get() {\n                return feedback.gain.value;\n            },\n            set: function set(value) {\n                feedback.gain.value = value;\n            }\n        }\n    });\n\n    return node;\n}\n\nfunction StereoFlanger(context, config) {\n    var input = context.createGain();\n    var splitter = context.createChannelSplitter(2);\n    var merger = context.createChannelMerger(2);\n    var feedbackL = context.createGain();\n    var feedbackR = context.createGain();\n    var lfo = context.createOscillator();\n    var lfoGainL = context.createGain();\n    var lfoGainR = context.createGain();\n    var delayL = context.createDelay();\n    var delayR = context.createDelay();\n    var output = context.createGain();\n\n    feedbackL.gain.value = feedbackR.gain.value = number(config.feedback, 0.5);\n    delayL.delayTime.value = delayR.delayTime.value = number(config.delay, 0.003);\n\n    lfo.type = 'sine';\n    lfo.frequency.value = number(config.frequency, 0.5);\n    lfoGainL.gain.value = number(config.gain, 0.005);\n    lfoGainR.gain.value = 0 - lfoGainL.gain.value;\n\n    input.connect(splitter);\n\n    splitter.connect(delayL, 0);\n    splitter.connect(delayR, 1);\n\n    delayL.connect(feedbackL);\n    delayR.connect(feedbackR);\n\n    feedbackL.connect(delayR);\n    feedbackR.connect(delayL);\n\n    delayL.connect(merger, 0, 0);\n    delayR.connect(merger, 0, 1);\n\n    merger.connect(output);\n    input.connect(output);\n\n    lfo.connect(lfoGainL);\n    lfo.connect(lfoGainR);\n    lfoGainL.connect(delayL.delayTime);\n    lfoGainR.connect(delayR.delayTime);\n    lfo.start(0);\n\n    var node = input;\n    node.name = 'StereoFlanger';\n    node._output = output;\n\n    Object.defineProperties(node, {\n        delay: {\n            get: function get() {\n                return delayL.delayTime.value;\n            },\n            set: function set(value) {\n                delayL.delayTime.value = delayR.delayTime.value = value;\n            }\n        },\n        lfoFrequency: {\n            get: function get() {\n                return lfo.frequency.value;\n            },\n            set: function set(value) {\n                lfo.frequency.value = value;\n            }\n        },\n        lfoGain: {\n            get: function get() {\n                return lfoGainL.gain.value;\n            },\n            set: function set(value) {\n                lfoGainL.gain.value = lfoGainR.gain.value = value;\n            }\n        },\n        feedback: {\n            get: function get() {\n                return feedbackL.gain.value;\n            },\n            set: function set(value) {\n                feedbackL.gain.value = feedbackR.gain.value = value;\n            }\n        }\n    });\n\n    return node;\n}\n\nfunction Flanger(context, config) {\n    config = config || {};\n    return config.stereo ? new StereoFlanger(context, config) : new MonoFlanger(context, config);\n}\n\nfunction Panner(context) {\n    var node = context.createPanner();\n\n    // Default for stereo is 'HRTF' can also be 'equalpower'\n    node.panningModel = Panner.defaults.panningModel;\n\n    // Distance model and attributes\n    // Can be 'linear' 'inverse' 'exponential'\n    node.distanceModel = Panner.defaults.distanceModel;\n    node.refDistance = Panner.defaults.refDistance;\n    node.maxDistance = Panner.defaults.maxDistance;\n    node.rolloffFactor = Panner.defaults.rolloffFactor;\n    node.coneInnerAngle = Panner.defaults.coneInnerAngle;\n    node.coneOuterAngle = Panner.defaults.coneOuterAngle;\n    node.coneOuterGain = Panner.defaults.coneOuterGain;\n    // set to defaults (needed in Firefox)\n    node.setPosition(0, 0, 1);\n    node.setOrientation(0, 0, 0);\n\n    // simple vec3 object pool\n    var vecPool = {\n        pool: [],\n        get: function get(x, y, z) {\n            var v = this.pool.length ? this.pool.pop() : {\n                x: 0,\n                y: 0,\n                z: 0\n            };\n            // check if a vector has been passed in\n            if (typeof x !== 'undefined' && isNaN(x) && 'x' in x && 'y' in x && 'z' in x) {\n                v.x = number(x.x);\n                v.y = number(x.y);\n                v.z = number(x.z);\n            } else {\n                v.x = number(x);\n                v.y = number(y);\n                v.z = number(z);\n            }\n            return v;\n        },\n        dispose: function dispose(instance) {\n            this.pool.push(instance);\n        }\n    };\n\n    var globalUp = vecPool.get(0, 1, 0),\n        angle45 = Math.PI / 4,\n        angle90 = Math.PI / 2;\n\n    // cross product of 2 vectors\n    function cross(a, b) {\n        var ax = a.x,\n            ay = a.y,\n            az = a.z;\n        var bx = b.x,\n            by = b.y,\n            bz = b.z;\n        a.x = ay * bz - az * by;\n        a.y = az * bx - ax * bz;\n        a.z = ax * by - ay * bx;\n    }\n\n    // normalise to unit vector\n    function normalize(vec3) {\n        if (vec3.x === 0 && vec3.y === 0 && vec3.z === 0) {\n            return vec3;\n        }\n        var length = Math.sqrt(vec3.x * vec3.x + vec3.y * vec3.y + vec3.z * vec3.z);\n        var invScalar = 1 / length;\n        vec3.x *= invScalar;\n        vec3.y *= invScalar;\n        vec3.z *= invScalar;\n        return vec3;\n    }\n\n    // set the orientation of the source (where the audio is coming from)\n    function setOrientation(pannerNode, fw) {\n        // calculate up vec ( up = (forward cross (0, 1, 0)) cross forward )\n        var up = vecPool.get(fw.x, fw.y, fw.z);\n        cross(up, globalUp);\n        cross(up, fw);\n        normalize(up);\n        normalize(fw);\n        // set the audio context's listener position to match the camera position\n        pannerNode.setOrientation(fw.x, fw.y, fw.z, up.x, up.y, up.z);\n        // return the vecs to the pool\n        vecPool.dispose(fw);\n        vecPool.dispose(up);\n    }\n\n    function setPosition(nodeOrListener, vec) {\n        nodeOrListener.setPosition(vec.x, vec.y, vec.z);\n        vecPool.dispose(vec);\n    }\n\n    node.set = function (x, y, z) {\n        var v = vecPool.get(x, y, z);\n\n        if (arguments.length === 1 && v.x) {\n            // pan left to right with value from -1 to 1\n            x = v.x;\n\n            if (x > 1) {\n                x = 1;\n            }\n            if (x < -1) {\n                x = -1;\n            }\n\n            // creates a nice curve with z\n            x = x * angle45;\n            z = x + angle90;\n\n            if (z > angle90) {\n                z = Math.PI - z;\n            }\n\n            v.x = Math.sin(x);\n            v.z = Math.sin(z);\n        }\n        setPosition(node, v);\n    };\n\n    // set the position the audio is coming from)\n    node.setSourcePosition = function (x, y, z) {\n        setPosition(node, vecPool.get(x, y, z));\n    };\n\n    // set the direction the audio is coming from)\n    node.setSourceOrientation = function (x, y, z) {\n        setOrientation(node, vecPool.get(x, y, z));\n    };\n\n    // set the position of who or what is hearing the audio (could be camera or some character)\n    node.setListenerPosition = function (x, y, z) {\n        setPosition(context.listener, vecPool.get(x, y, z));\n    };\n\n    // set the position of who or what is hearing the audio (could be camera or some character)\n    node.setListenerOrientation = function (x, y, z) {\n        setOrientation(context.listener, vecPool.get(x, y, z));\n    };\n\n    node.getDefaults = function () {\n        return Panner.defaults;\n    };\n\n    node.setDefaults = function (defaults) {\n        Object.keys(defaults).forEach(function (key) {\n            Panner.defaults[key] = defaults[key];\n        });\n    };\n\n    return node;\n}\n\nPanner.defaults = {\n    panningModel: 'HRTF',\n    distanceModel: 'linear',\n    refDistance: 1,\n    maxDistance: 1000,\n    rolloffFactor: 1,\n    coneInnerAngle: 360,\n    coneOuterAngle: 0,\n    coneOuterGain: 0\n};\n\nfunction Phaser(context) {\n    var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var stages = number(config.stages, 8);\n    var filters = [];\n    var filter = void 0;\n\n    var input = context.createGain();\n    var feedback = context.createGain();\n    var lfo = context.createOscillator();\n    var lfoGain = context.createGain();\n    var output = context.createGain();\n\n    feedback.gain.value = number(config.feedback, 0.5);\n\n    lfo.type = 'sine';\n    lfo.frequency.value = number(config.frequency, 0.5);\n    lfoGain.gain.value = number(config.gain, 300);\n\n    for (var i = 0; i < stages; i++) {\n        filter = context.createBiquadFilter();\n        filter.type = 'allpass';\n        filter.frequency.value = 1000 * i;\n        //filter.Q.value = 10;\n        if (i > 0) {\n            filters[i - 1].connect(filter);\n        }\n        lfoGain.connect(filter.frequency);\n\n        filters.push(filter);\n    }\n\n    var first = filters[0];\n    var last = filters[filters.length - 1];\n\n    input.connect(first);\n    input.connect(output);\n    last.connect(output);\n    last.connect(feedback);\n    feedback.connect(first);\n    lfo.connect(lfoGain);\n    lfo.start(0);\n\n    var node = input;\n    node.name = 'Phaser';\n    node._output = output;\n\n    Object.defineProperties(node, {\n        lfoFrequency: {\n            get: function get() {\n                return lfo.frequency.value;\n            },\n            set: function set(value) {\n                lfo.frequency.value = value;\n            }\n        },\n        lfoGain: {\n            get: function get() {\n                return lfoGain.gain.value;\n            },\n            set: function set(value) {\n                lfoGain.gain.value = value;\n            }\n        },\n        feedback: {\n            get: function get() {\n                return feedback.gain.value;\n            },\n            set: function set(value) {\n                feedback.gain.value = value;\n            }\n        }\n    });\n\n    return node;\n}\n\nfunction Recorder(context, passThrough) {\n    var bufferLength = 4096,\n        buffersL = [],\n        buffersR = [];\n    var startedAt = 0,\n        stoppedAt = 0;\n\n    var input = context.createGain();\n    var output = context.createGain();\n    var script = void 0;\n\n    var node = input;\n    node.name = 'Recorder';\n    node._output = output;\n\n    node.isRecording = false;\n\n    function mergeBuffers(buffers, length) {\n        var buffer = new Float32Array(length);\n        var offset = 0;\n        for (var i = 0; i < buffers.length; i++) {\n            buffer.set(buffers[i], offset);\n            offset += buffers[i].length;\n        }\n        return buffer;\n    }\n\n    function getBuffer() {\n        if (!buffersL.length) {\n            return context.createBuffer(2, bufferLength, context.sampleRate);\n        }\n        var recordingLength = buffersL.length * bufferLength;\n        var buffer = context.createBuffer(2, recordingLength, context.sampleRate);\n        buffer.getChannelData(0).set(mergeBuffers(buffersL, recordingLength));\n        buffer.getChannelData(1).set(mergeBuffers(buffersR, recordingLength));\n        return buffer;\n    }\n\n    function destroyScriptProcessor() {\n        if (script) {\n            script.onaudioprocess = null;\n            input.disconnect();\n            script.disconnect();\n        }\n    }\n\n    function createScriptProcessor() {\n        destroyScriptProcessor();\n\n        script = context.createScriptProcessor(bufferLength, 2, 2);\n        input.connect(script);\n        script.connect(context.destination);\n        script.connect(output);\n\n        script.onaudioprocess = function (event) {\n            var inputL = event.inputBuffer.getChannelData(0);\n            var inputR = event.inputBuffer.getChannelData(1);\n\n            if (passThrough) {\n                var outputL = event.outputBuffer.getChannelData(0);\n                var outputR = event.outputBuffer.getChannelData(1);\n                outputL.set(inputL);\n                outputR.set(inputR);\n            }\n\n            if (node.isRecording) {\n                buffersL.push(new Float32Array(inputL));\n                buffersR.push(new Float32Array(inputR));\n            }\n        };\n    }\n\n    node.start = function () {\n        createScriptProcessor();\n        buffersL.length = 0;\n        buffersR.length = 0;\n        startedAt = context.currentTime;\n        stoppedAt = 0;\n        this.isRecording = true;\n    };\n\n    node.stop = function () {\n        stoppedAt = context.currentTime;\n        this.isRecording = false;\n        destroyScriptProcessor();\n        return getBuffer();\n    };\n\n    node.getDuration = function () {\n        if (!this.isRecording) {\n            return stoppedAt - startedAt;\n        }\n        return context.currentTime - startedAt;\n    };\n\n    return node;\n}\n\nfunction Reverb(context) {\n    var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var rate = context.sampleRate;\n\n    var time = number(config.time, 1);\n    var decay = number(config.decay, 5);\n    var reverse = !!config.reverse;\n    var length = void 0;\n    var impulseResponse = void 0;\n\n    var input = context.createGain();\n    var reverb = context.createConvolver();\n    var output = context.createGain();\n\n    input.connect(reverb);\n    input.connect(output);\n    reverb.connect(output);\n\n    var node = input;\n    node.name = 'Reverb';\n    node._output = output;\n\n    node.update = function (opt) {\n        if (typeof opt.time !== 'undefined') {\n            time = opt.time;\n            length = Math.floor(rate * time);\n            impulseResponse = length ? context.createBuffer(2, length, rate) : null;\n        }\n        if (typeof opt.decay !== 'undefined') {\n            decay = opt.decay;\n        }\n        if (typeof opt.reverse !== 'undefined') {\n            reverse = opt.reverse;\n        }\n\n        if (!impulseResponse) {\n            reverb.buffer = null;\n            return;\n        }\n\n        var left = impulseResponse.getChannelData(0);\n        var right = impulseResponse.getChannelData(1);\n        var n = void 0,\n            e = void 0;\n\n        for (var i = 0; i < length; i++) {\n            n = reverse ? length - i : i;\n            e = Math.pow(1 - n / length, decay);\n            left[i] = (Math.random() * 2 - 1) * e;\n            right[i] = (Math.random() * 2 - 1) * e;\n        }\n\n        reverb.buffer = impulseResponse;\n    };\n\n    node.update({\n        time: time,\n        decay: decay,\n        reverse: reverse\n    });\n\n    Object.defineProperties(node, {\n        time: {\n            get: function get() {\n                return time;\n            },\n            set: function set(value) {\n                if (value === time) {\n                    return;\n                }\n                this.update({\n                    time: value\n                });\n            }\n        },\n        decay: {\n            get: function get() {\n                return decay;\n            },\n            set: function set(value) {\n                if (value === decay) {\n                    return;\n                }\n                this.update({\n                    decay: value\n                });\n            }\n        },\n        reverse: {\n            get: function get() {\n                return reverse;\n            },\n            set: function set(value) {\n                if (value === reverse) {\n                    return;\n                }\n                this.update({\n                    reverse: !!value\n                });\n            }\n        }\n    });\n\n    return node;\n}\n\nfunction Effect(context) {\n    context = context || new FakeContext();\n    var panning = new Panner(context);\n\n    var api = null,\n        destination = void 0,\n        nodeList = [],\n        sourceNode = void 0;\n\n    function connect(a, b) {\n        //console.log('> connect', (a.name || a.constructor.name), 'to', (b.name || b.constructor.name));\n\n        var output = a._output || a;\n        //console.log('> disconnect output: ', (a.name || a.constructor.name));\n        output.disconnect();\n        //console.log('> connect output: ',(a.name || a.constructor.name), 'to input:', (b.name || b.constructor.name));\n        output.connect(b);\n    }\n\n    function connectToDestination(node) {\n        var l = nodeList.length;\n        var lastNode = l ? nodeList[l - 1] : sourceNode;\n\n        if (lastNode) {\n            connect(lastNode, node);\n        }\n\n        destination = node;\n    }\n\n    function updateConnections() {\n        if (!sourceNode) {\n            return;\n        }\n\n        //console.log('updateConnections:', nodeList.length);\n\n        var node = void 0,\n            prev = void 0;\n\n        for (var i = 0; i < nodeList.length; i++) {\n            node = nodeList[i];\n            //console.log(i, node);\n            prev = i === 0 ? sourceNode : nodeList[i - 1];\n            connect(prev, node);\n        }\n\n        if (destination) {\n            connectToDestination(destination);\n        }\n    }\n\n    function has(node) {\n        if (!node) {\n            return false;\n        }\n        return nodeList.indexOf(node) > -1;\n    }\n\n    function add(node) {\n        if (!node) {\n            return null;\n        }\n        if (has(node)) {\n            return node;\n        }\n        nodeList.push(node);\n        updateConnections();\n        return node;\n    }\n\n    function remove(node) {\n        if (!node) {\n            return null;\n        }\n        if (!has(node)) {\n            return node;\n        }\n        var l = nodeList.length;\n        for (var i = 0; i < l; i++) {\n            if (node === nodeList[i]) {\n                nodeList.splice(i, 1);\n                break;\n            }\n        }\n        var output = node._output || node;\n        output.disconnect();\n        updateConnections();\n        return node;\n    }\n\n    function toggle(node, force) {\n        force = !!force;\n        var hasNode = has(node);\n        if (arguments.length > 1 && hasNode === force) {\n            return api;\n        }\n        if (hasNode) {\n            remove(node);\n        } else {\n            add(node);\n        }\n        return api;\n    }\n\n    function removeAll() {\n        while (nodeList.length) {\n            nodeList.pop().disconnect();\n        }\n        updateConnections();\n        return api;\n    }\n\n    function destroy() {\n        removeAll();\n        context = null;\n        destination = null;\n        nodeList = [];\n        if (sourceNode) {\n            sourceNode.disconnect();\n        }\n        sourceNode = null;\n    }\n\n    /*\n     * Effects\n     */\n\n    function analyser(config) {\n        return add(new Analyser(context, config));\n    }\n\n    // lowers the volume of the loudest parts of the signal and raises the volume of the softest parts\n    function compressor(options) {\n        var node = context.createDynamicsCompressor();\n\n        node.update = function (config) {\n            // min decibels to start compressing at from -100 to 0\n            node.threshold.value = typeof config.threshold !== 'undefined' ? config.threshold : -24;\n            // decibel value to start curve to compressed value from 0 to 40\n            node.knee.value = typeof config.knee !== 'undefined' ? config.knee : 30;\n            // amount of change per decibel from 1 to 20\n            node.ratio.value = typeof config.ratio !== 'undefined' ? config.ratio : 12;\n            // gain reduction currently applied by compressor from -20 to 0\n            // node.reduction.value = typeof config.reduction !== 'undefined' ? config.reduction : -10;)\n            // seconds to reduce gain by 10db from 0 to 1 - how quickly signal adapted when volume increased\n            node.attack.value = typeof config.attack !== 'undefined' ? config.attack : 0.0003;\n            // seconds to increase gain by 10db from 0 to 1 - how quickly signal adapted when volume redcuced\n            node.release.value = typeof config.release !== 'undefined' ? config.release : 0.25;\n        };\n\n        node.update(options || {});\n\n        return add(node);\n    }\n\n    function convolver(impulseResponse) {\n        // impulseResponse is an audio file buffer\n        var node = context.createConvolver();\n        node.buffer = impulseResponse;\n        return add(node);\n    }\n\n    function delay(time) {\n        var node = context.createDelay();\n        if (typeof time !== 'undefined') {\n            node.delayTime.value = time;\n        }\n        return add(node);\n    }\n\n    function echo(config) {\n        return add(new Echo(context, config));\n    }\n\n    function distortion(amount) {\n        // Float32Array defining curve (values are interpolated)\n        //node.curve\n        // up-sample before applying curve for better resolution result 'none', '2x' or '4x'\n        //node.oversample = '2x';\n        return add(new Distortion(context, amount));\n    }\n\n    function filter(type, frequency, q, gain) {\n        return add(new Filter(context, { type: type, frequency: frequency, q: q, gain: gain }));\n    }\n\n    function lowpass(frequency, peak) {\n        return filter('lowpass', { frequency: frequency, q: peak });\n    }\n\n    function highpass(frequency, peak) {\n        return filter('highpass', { frequency: frequency, q: peak });\n    }\n\n    function bandpass(frequency, width) {\n        return filter('bandpass', { frequency: frequency, q: width });\n    }\n\n    function lowshelf(frequency, gain) {\n        return filter('lowshelf', { frequency: frequency, q: 0, gain: gain });\n    }\n\n    function highshelf(frequency, gain) {\n        return filter('highshelf', { frequency: frequency, q: 0, gain: gain });\n    }\n\n    function peaking(frequency, width, gain) {\n        return filter('peaking', { frequency: frequency, q: width, gain: gain });\n    }\n\n    function notch(frequency, width, gain) {\n        return filter('notch', { frequency: frequency, q: width, gain: gain });\n    }\n\n    function allpass(frequency, sharpness) {\n        return filter('allpass', { frequency: frequency, q: sharpness });\n    }\n\n    function flanger(config) {\n        return add(new Flanger(context, config));\n    }\n\n    function gainNode(value) {\n        var node = context.createGain();\n        if (typeof value !== 'undefined') {\n            node.gain.value = value;\n        }\n        return node;\n    }\n\n    function panner() {\n        return add(new Panner(context));\n    }\n\n    function phaser(config) {\n        return add(new Phaser(context, config));\n    }\n\n    function recorder(passThrough) {\n        return add(new Recorder(context, passThrough));\n    }\n\n    function reverb(seconds, decay, reverse) {\n        return add(new Reverb(context, seconds, decay, reverse));\n    }\n\n    function script() {\n        var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        // bufferSize 256 - 16384 (pow 2)\n        var bufferSize = config.bufferSize || 1024;\n        var inputChannels = typeof config.inputChannels === 'undefined' ? 0 : config.inputChannels;\n        var outputChannels = typeof config.outputChannels === 'undefined' ? 1 : config.outputChannels;\n\n        var node = context.createScriptProcessor(bufferSize, inputChannels, outputChannels);\n\n        var thisArg = config.thisArg || config.context || node;\n        var callback = config.callback || function () {};\n\n        // available props:\n        /*\n        event.inputBuffer\n        event.outputBuffer\n        event.playbackTime\n        */\n        // Example: generate noise\n        /*\n        const output = event.outputBuffer.getChannelData(0);\n        const l = output.length;\n        for (let i = 0; i < l; i++) {\n            output[i] = Math.random();\n        }\n        */\n        node.onaudioprocess = callback.bind(thisArg);\n\n        return add(node);\n    }\n\n    function setSource(node) {\n        sourceNode = node;\n        updateConnections();\n        return node;\n    }\n\n    function setDestination(node) {\n        connectToDestination(node);\n        return node;\n    }\n\n    //\n\n    api = {\n        context: context,\n        nodeList: nodeList,\n        panning: panning,\n\n        has: has,\n        add: add,\n        remove: remove,\n        toggle: toggle,\n        removeAll: removeAll,\n        destroy: destroy,\n        setSource: setSource,\n        setDestination: setDestination,\n\n        analyser: analyser,\n        compressor: compressor,\n        convolver: convolver,\n        delay: delay,\n        echo: echo,\n        distortion: distortion,\n        filter: filter,\n        lowpass: lowpass,\n        highpass: highpass,\n        bandpass: bandpass,\n        lowshelf: lowshelf,\n        highshelf: highshelf,\n        peaking: peaking,\n        notch: notch,\n        allpass: allpass,\n        flanger: flanger,\n        gain: gainNode,\n        panner: panner,\n        phaser: phaser,\n        recorder: recorder,\n        reverb: reverb,\n        script: script\n    };\n\n    return Object.freeze(api);\n}\n\nfunction Group(context, destination) {\n    var sounds = [];\n    var effect = new Effect(context);\n    var gain = effect.gain();\n    var preMuteVolume = 1;\n    var group = null;\n\n    if (context) {\n        effect.setSource(gain);\n        effect.setDestination(destination || context.destination);\n    }\n\n    /*\n     * Add / remove\n     */\n\n    function find(soundOrId, callback) {\n        var found = void 0;\n\n        if (!soundOrId && soundOrId !== 0) {\n            return found;\n        }\n\n        sounds.some(function (sound) {\n            if (sound === soundOrId || sound.id === soundOrId) {\n                found = sound;\n                return true;\n            }\n            return false;\n        });\n\n        if (found && callback) {\n            return callback(found);\n        }\n\n        return found;\n    }\n\n    function remove(soundOrId) {\n        find(soundOrId, function (sound) {\n            return sounds.splice(sounds.indexOf(sound), 1);\n        });\n        return group;\n    }\n\n    function add(sound) {\n        sound.gain.disconnect();\n        sound.gain.connect(gain);\n\n        sounds.push(sound);\n\n        sound.once('destroy', remove);\n\n        return group;\n    }\n\n    /*\n     * Controls\n     */\n\n    function play(delay, offset) {\n        sounds.forEach(function (sound) {\n            return sound.play(delay, offset);\n        });\n        return group;\n    }\n\n    function pause() {\n        sounds.forEach(function (sound) {\n            if (sound.playing) {\n                sound.pause();\n            }\n        });\n        return group;\n    }\n\n    function resume() {\n        sounds.forEach(function (sound) {\n            if (sound.paused) {\n                sound.play();\n            }\n        });\n        return group;\n    }\n\n    function stop() {\n        sounds.forEach(function (sound) {\n            return sound.stop();\n        });\n        return group;\n    }\n\n    function seek(percent) {\n        sounds.forEach(function (sound) {\n            return sound.seek(percent);\n        });\n        return group;\n    }\n\n    function mute() {\n        preMuteVolume = group.volume;\n        group.volume = 0;\n        return group;\n    }\n\n    function unMute() {\n        group.volume = preMuteVolume || 1;\n        return group;\n    }\n\n    function setVolume(value) {\n        group.volume = value;\n        return group;\n    }\n\n    function fade(volume, duration) {\n        if (context) {\n            var param = gain.gain;\n            var time = context.currentTime;\n\n            param.cancelScheduledValues(time);\n            param.setValueAtTime(param.value, time);\n            // param.setValueAtTime(volume, time + duration);\n            param.linearRampToValueAtTime(volume, time + duration);\n            // param.setTargetAtTime(volume, time, duration);\n            // param.exponentialRampToValueAtTime(Math.max(volume, 0.0001), time + duration);\n        } else {\n            sounds.forEach(function (sound) {\n                return sound.fade(volume, duration);\n            });\n        }\n\n        return group;\n    }\n\n    /*\n     * Load\n     */\n\n    function load() {\n        sounds.forEach(function (sound) {\n            return sound.load(null, true);\n        });\n    }\n\n    /*\n     * Unload\n     */\n\n    function unload() {\n        sounds.forEach(function (sound) {\n            return sound.unload();\n        });\n    }\n\n    /*\n     * Destroy\n     */\n\n    function destroy() {\n        while (sounds.length) {\n            sounds.pop().destroy();\n        }\n    }\n\n    /*\n     * Api\n     */\n\n    group = {\n        add: add,\n        find: find,\n        remove: remove,\n        play: play,\n        pause: pause,\n        resume: resume,\n        stop: stop,\n        seek: seek,\n        setVolume: setVolume,\n        mute: mute,\n        unMute: unMute,\n        fade: fade,\n        load: load,\n        unload: unload,\n        destroy: destroy\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(group, {\n        effect: {\n            value: effect\n        },\n        gain: {\n            value: gain\n        },\n        sounds: {\n            value: sounds\n        },\n        volume: {\n            get: function get() {\n                return gain.gain.value;\n            },\n            set: function set(value) {\n                if (isNaN(value)) {\n                    return;\n                }\n\n                value = Math.min(Math.max(value, 0), 1);\n\n                if (context) {\n                    gain.gain.cancelScheduledValues(context.currentTime);\n                    gain.gain.value = value;\n                    gain.gain.setValueAtTime(value, context.currentTime);\n                } else {\n                    gain.gain.value = value;\n                }\n                sounds.forEach(function (sound) {\n                    if (!sound.context) {\n                        sound.groupVolume = value;\n                    }\n                });\n            }\n        }\n    });\n\n    return group;\n}\n\nGroup.Effect = Effect;\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter$1() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nvar events = EventEmitter$1;\n\n// Backwards-compat with node 0.10.x\nEventEmitter$1.EventEmitter = EventEmitter$1;\n\nEventEmitter$1.prototype._events = undefined;\nEventEmitter$1.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter$1.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter$1.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter$1.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter$1.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter$1.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;\n\nEventEmitter$1.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter$1.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter$1.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter$1.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter$1.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter$1.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nvar EventEmitter = events.EventEmitter;\n\nvar Emitter = function (_EventEmitter) {\n    inherits(Emitter, _EventEmitter);\n\n    function Emitter() {\n        classCallCheck(this, Emitter);\n        return possibleConstructorReturn(this, _EventEmitter.call(this));\n    }\n\n    Emitter.prototype.off = function off(type, listener) {\n        if (listener) {\n            return this.removeListener(type, listener);\n        }\n        if (type) {\n            return this.removeAllListeners(type);\n        }\n        return this.removeAllListeners();\n    };\n\n    return Emitter;\n}(EventEmitter);\n\nfunction Loader(url, deferLoad) {\n    var ERROR_STATE = ['', 'ABORTED', 'NETWORK', 'DECODE', 'SRC_NOT_SUPPORTED'];\n    var emitter = new Emitter();\n    var progress = 0,\n        audioContext = void 0,\n        isTouchLocked = void 0,\n        request = void 0,\n        timeout = void 0,\n        data = void 0;\n\n    // clean up\n\n    function removeListeners() {\n        emitter.off('error');\n        emitter.off('progress');\n        emitter.off('complete');\n        emitter.off('loaded');\n\n        if (data && typeof data.removeEventListener === 'function') {\n            data.removeEventListener('canplaythrough', readyHandler);\n            data.removeEventListener('error', errorHandler);\n        }\n\n        if (request) {\n            request.removeEventListener('progress', progressHandler);\n            request.removeEventListener('load', loadHandler);\n            request.removeEventListener('error', errorHandler);\n        }\n    }\n\n    function dispatchComplete(buffer) {\n        emitter.emit('progress', 1);\n        emitter.emit('loaded', buffer);\n        emitter.emit('complete', buffer);\n\n        removeListeners();\n    }\n\n    function progressHandler(event) {\n        if (event.lengthComputable) {\n            progress = event.loaded / event.total;\n            emitter.emit('progress', progress);\n        }\n    }\n\n    // error\n\n    function errorHandler(event) {\n        window.clearTimeout(timeout);\n\n        var message = event;\n\n        if (data && data.error) {\n            message = 'Media Error: ' + ERROR_STATE[data.error.code] + ' ' + url;\n        }\n\n        if (request) {\n            message = 'XHR Error: ' + request.status + ' ' + request.statusText + ' ' + url;\n        }\n\n        emitter.emit('error', message);\n\n        removeListeners();\n    }\n\n    function decodeArrayBuffer(arraybuffer) {\n        audioContext.decodeAudioData(arraybuffer, function (buffer) {\n            data = buffer;\n            request = null;\n            progress = 1;\n            dispatchComplete(buffer);\n        }, errorHandler);\n    }\n\n    function loadHandler() {\n        decodeArrayBuffer(request.response);\n    }\n\n    function readyHandler() {\n        window.clearTimeout(timeout);\n        if (!data) {\n            return;\n        }\n        progress = 1;\n        dispatchComplete(data);\n    }\n\n    function cancel() {\n        removeListeners();\n\n        if (request && request.readyState !== 4) {\n            request.abort();\n        }\n        request = null;\n\n        window.clearTimeout(timeout);\n    }\n\n    function destroy() {\n        cancel();\n        request = null;\n        data = null;\n        audioContext = null;\n    }\n\n    // audio buffer\n\n    function loadArrayBuffer() {\n        if (url instanceof window.ArrayBuffer) {\n            decodeArrayBuffer(url);\n            return;\n        }\n        request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        request.addEventListener('progress', progressHandler);\n        request.addEventListener('load', loadHandler);\n        request.addEventListener('error', errorHandler);\n        request.send();\n    }\n\n    // audio element\n\n    function loadAudioElement() {\n        if (!data || !data.tagName) {\n            data = document.createElement('audio');\n        }\n\n        if (!isTouchLocked) {\n            // timeout because sometimes canplaythrough doesn't fire\n            window.clearTimeout(timeout);\n            timeout = window.setTimeout(readyHandler, 2000);\n            data.addEventListener('canplaythrough', readyHandler, false);\n        }\n\n        data.addEventListener('error', errorHandler, false);\n        data.preload = 'auto';\n        data.src = url;\n        data.load();\n\n        if (isTouchLocked) {\n            dispatchComplete(data);\n        }\n    }\n\n    function start() {\n        var force = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n        if (deferLoad && !force) {\n            return;\n        }\n        if (audioContext) {\n            loadArrayBuffer();\n        } else {\n            loadAudioElement();\n        }\n    }\n\n    // reload\n\n    function load(newUrl) {\n        url = newUrl;\n        start();\n    }\n\n    var api = {\n        on: emitter.on.bind(emitter),\n        once: emitter.once.bind(emitter),\n        off: emitter.off.bind(emitter),\n        load: load,\n        start: start,\n        cancel: cancel,\n        destroy: destroy\n    };\n\n    Object.defineProperties(api, {\n        data: {\n            get: function get() {\n                return data;\n            }\n        },\n        progress: {\n            get: function get() {\n                return progress;\n            }\n        },\n        audioContext: {\n            set: function set(value) {\n                audioContext = value;\n            }\n        },\n        isTouchLocked: {\n            set: function set(value) {\n                isTouchLocked = value;\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nLoader.Group = function () {\n    var emitter = new Emitter();\n    var queue = [];\n    var numLoaded = 0,\n        numTotal = 0,\n        currentLoader = void 0;\n\n    function progressHandler(progress) {\n        var loaded = numLoaded + progress;\n        emitter.emit('progress', loaded / numTotal);\n    }\n\n    function completeHandler() {\n        numLoaded++;\n        removeListeners();\n        emitter.emit('progress', numLoaded / numTotal);\n        next();\n    }\n\n    function errorHandler(e) {\n        console.error(e);\n        removeListeners();\n        emitter.emit('error', e);\n        next();\n    }\n\n    function next() {\n        if (queue.length === 0) {\n            currentLoader = null;\n            emitter.emit('complete');\n            return;\n        }\n\n        currentLoader = queue.pop();\n        currentLoader.on('progress', progressHandler);\n        currentLoader.once('loaded', completeHandler);\n        currentLoader.once('error', errorHandler);\n        currentLoader.start();\n    }\n\n    function removeListeners() {\n        currentLoader.off('progress', progressHandler);\n        currentLoader.off('loaded', completeHandler);\n        currentLoader.off('error', errorHandler);\n    }\n\n    function add(loader) {\n        queue.push(loader);\n        numTotal++;\n        return loader;\n    }\n\n    function start() {\n        numTotal = queue.length;\n        next();\n    }\n\n    return Object.freeze({\n        on: emitter.on.bind(emitter),\n        once: emitter.once.bind(emitter),\n        off: emitter.off.bind(emitter),\n        add: add,\n        start: start\n    });\n};\n\nfunction BufferSource(buffer, context, onEnded) {\n    var api = {};\n    var ended = false,\n        endedCallback = onEnded,\n        loop = false,\n        paused = false,\n        pausedAt = 0,\n        playbackRate = 1,\n        playing = false,\n        sourceNode = null,\n        startedAt = 0;\n\n    function createSourceNode() {\n        if (!sourceNode && context) {\n            sourceNode = context.createBufferSource();\n            sourceNode.buffer = buffer;\n        }\n        return sourceNode;\n    }\n\n    /*\n     * Controls\n     */\n\n    function stop() {\n        if (sourceNode) {\n            sourceNode.onended = null;\n            try {\n                sourceNode.disconnect();\n                sourceNode.stop(0);\n            } catch (e) {}\n            sourceNode = null;\n        }\n\n        paused = false;\n        pausedAt = 0;\n        playing = false;\n        startedAt = 0;\n    }\n\n    function pause() {\n        var elapsed = context.currentTime - startedAt;\n        stop();\n        pausedAt = elapsed;\n        playing = false;\n        paused = true;\n    }\n\n    function endedHandler() {\n        stop();\n        ended = true;\n        if (typeof endedCallback === 'function') {\n            endedCallback(api);\n        }\n    }\n\n    function play(delay) {\n        var offset = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n        if (playing) {\n            return;\n        }\n\n        delay = delay ? context.currentTime + delay : 0;\n        if (offset) {\n            pausedAt = 0;\n        }\n        if (pausedAt) {\n            offset = pausedAt;\n        }\n        while (offset > api.duration) {\n            offset = offset % api.duration;\n        }\n\n        createSourceNode();\n        sourceNode.onended = endedHandler;\n        sourceNode.start(delay, offset);\n\n        sourceNode.loop = loop;\n        sourceNode.playbackRate.value = playbackRate;\n\n        startedAt = context.currentTime - offset;\n        ended = false;\n        paused = false;\n        pausedAt = 0;\n        playing = true;\n    }\n\n    /*\n     * Destroy\n     */\n\n    function destroy() {\n        stop();\n        buffer = null;\n        context = null;\n        endedCallback = null;\n        sourceNode = null;\n    }\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        play: {\n            value: play\n        },\n        pause: {\n            value: pause\n        },\n        stop: {\n            value: stop\n        },\n        destroy: {\n            value: destroy\n        },\n        currentTime: {\n            get: function get() {\n                if (pausedAt) {\n                    return pausedAt;\n                }\n                if (startedAt) {\n                    var time = context.currentTime - startedAt;\n                    if (time > api.duration) {\n                        time = time % api.duration;\n                    }\n                    return time;\n                }\n                return 0;\n            }\n        },\n        duration: {\n            get: function get() {\n                return buffer ? buffer.duration : 0;\n            }\n        },\n        ended: {\n            get: function get() {\n                return ended;\n            }\n        },\n        loop: {\n            get: function get() {\n                return loop;\n            },\n            set: function set(value) {\n                loop = !!value;\n                if (sourceNode) {\n                    sourceNode.loop = loop;\n                }\n            }\n        },\n        paused: {\n            get: function get() {\n                return paused;\n            }\n        },\n        playbackRate: {\n            get: function get() {\n                return playbackRate;\n            },\n            set: function set(value) {\n                playbackRate = value;\n                if (sourceNode) {\n                    sourceNode.playbackRate.value = playbackRate;\n                }\n            }\n        },\n        playing: {\n            get: function get() {\n                return playing;\n            }\n        },\n        progress: {\n            get: function get() {\n                return api.duration ? api.currentTime / api.duration : 0;\n            }\n        },\n        sourceNode: {\n            get: function get() {\n                return createSourceNode();\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nfunction MediaSource(el, context, onEnded) {\n    var api = {};\n    var ended = false,\n        endedCallback = onEnded,\n        delayTimeout = void 0,\n        fadeTimeout = void 0,\n        loop = false,\n        paused = false,\n        playbackRate = 1,\n        playing = false,\n        sourceNode = null,\n        groupVolume = 1,\n        volume = 1;\n\n    function createSourceNode() {\n        if (!sourceNode && context) {\n            sourceNode = context.createMediaElementSource(el);\n        }\n        return sourceNode;\n    }\n\n    /*\n     * Load\n     */\n\n    function load(url) {\n        el.src = url;\n        el.load();\n        ended = false;\n        paused = false;\n        playing = false;\n    }\n\n    /*\n     * Controls\n     */\n\n    function readyHandler() {\n        el.removeEventListener('canplaythrough', readyHandler);\n        if (playing) {\n            el.play();\n        }\n    }\n\n    /*\n     * Ended handler\n     */\n\n    function endedHandler() {\n\n        if (loop) {\n            el.currentTime = 0;\n            // fixes bug where server doesn't support seek:\n            if (el.currentTime > 0) {\n                el.load();\n            }\n            el.play();\n\n            return;\n        }\n\n        ended = true;\n        paused = false;\n        playing = false;\n\n        if (typeof endedCallback === 'function') {\n            endedCallback(api);\n        }\n    }\n\n    function play(delay, offset) {\n        clearTimeout(delayTimeout);\n\n        el.volume = volume * groupVolume;\n        el.playbackRate = playbackRate;\n\n        if (offset) {\n            el.currentTime = offset;\n        }\n\n        if (delay) {\n            delayTimeout = setTimeout(play, delay);\n        } else {\n            // el.load();\n            el.play();\n        }\n\n        ended = false;\n        paused = false;\n        playing = true;\n\n        el.removeEventListener('ended', endedHandler);\n        el.addEventListener('ended', endedHandler, false);\n\n        if (el.readyState < 1) {\n            el.removeEventListener('canplaythrough', readyHandler);\n            el.addEventListener('canplaythrough', readyHandler, false);\n            el.load();\n            el.play();\n        }\n    }\n\n    function pause() {\n        clearTimeout(delayTimeout);\n\n        if (!el) {\n            return;\n        }\n\n        el.pause();\n        playing = false;\n        paused = true;\n    }\n\n    function stop() {\n        clearTimeout(delayTimeout);\n\n        if (!el) {\n            return;\n        }\n\n        el.pause();\n\n        try {\n            el.currentTime = 0;\n            // fixes bug where server doesn't support seek:\n            if (el.currentTime > 0) {\n                el.load();\n            }\n        } catch (e) {}\n\n        playing = false;\n        paused = false;\n    }\n\n    /*\n     * Fade for no webaudio\n     */\n\n    function fade(toVolume, duration) {\n        if (context) {\n            return api;\n        }\n\n        function ramp(value, step) {\n            fadeTimeout = window.setTimeout(function () {\n                api.volume = api.volume + (value - api.volume) * 0.2;\n                if (Math.abs(api.volume - value) > 0.05) {\n                    ramp(value, step);\n                    return;\n                }\n                api.volume = value;\n            }, step * 1000);\n        }\n\n        window.clearTimeout(fadeTimeout);\n        ramp(toVolume, duration / 10);\n\n        return api;\n    }\n\n    /*\n     * Destroy\n     */\n\n    function destroy() {\n        el.removeEventListener('ended', endedHandler);\n        el.removeEventListener('canplaythrough', readyHandler);\n        stop();\n        el = null;\n        context = null;\n        endedCallback = null;\n        sourceNode = null;\n    }\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        play: {\n            value: play\n        },\n        pause: {\n            value: pause\n        },\n        stop: {\n            value: stop\n        },\n        load: {\n            value: load\n        },\n        fade: {\n            value: fade\n        },\n        destroy: {\n            value: destroy\n        },\n        currentTime: {\n            get: function get() {\n                return el ? el.currentTime : 0;\n            }\n        },\n        duration: {\n            get: function get() {\n                return el ? el.duration : 0;\n            }\n        },\n        ended: {\n            get: function get() {\n                return ended;\n            }\n        },\n        loop: {\n            get: function get() {\n                return loop;\n            },\n            set: function set(value) {\n                loop = !!value;\n            }\n        },\n        paused: {\n            get: function get() {\n                return paused;\n            }\n        },\n        playbackRate: {\n            get: function get() {\n                return playbackRate;\n            },\n            set: function set(value) {\n                playbackRate = value;\n                if (el) {\n                    el.playbackRate = playbackRate;\n                }\n            }\n        },\n        playing: {\n            get: function get() {\n                return playing;\n            }\n        },\n        progress: {\n            get: function get() {\n                return el && el.duration ? el.currentTime / el.duration : 0;\n            }\n        },\n        sourceNode: {\n            get: function get() {\n                return createSourceNode();\n            }\n        },\n        volume: {\n            get: function get() {\n                return volume;\n            },\n            set: function set(value) {\n                window.clearTimeout(fadeTimeout);\n                volume = value;\n                if (el) {\n                    el.volume = volume * groupVolume;\n                }\n            }\n        },\n        groupVolume: {\n            get: function get() {\n                return groupVolume;\n            },\n            set: function set(value) {\n                groupVolume = value;\n                if (el) {\n                    el.volume = volume * groupVolume;\n                }\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nfunction MicrophoneSource(stream, context) {\n    var ended = false,\n        paused = false,\n        pausedAt = 0,\n        playing = false,\n        sourceNode = null,\n        // MicrophoneSourceNode\n    startedAt = 0;\n\n    function createSourceNode() {\n        if (!sourceNode && context) {\n            sourceNode = context.createMediaStreamSource(stream);\n            // HACK: stops moz garbage collection killing the stream\n            // see https://support.mozilla.org/en-US/questions/984179\n            if (navigator.mozGetUserMedia) {\n                window.mozHack = sourceNode;\n            }\n        }\n        return sourceNode;\n    }\n\n    /*\n     * Controls\n     */\n\n    function play(delay) {\n        delay = delay ? context.currentTime + delay : 0;\n\n        createSourceNode();\n        sourceNode.start(delay);\n\n        startedAt = context.currentTime - pausedAt;\n        ended = false;\n        playing = true;\n        paused = false;\n        pausedAt = 0;\n    }\n\n    function stop() {\n        if (sourceNode) {\n            try {\n                sourceNode.stop(0);\n            } catch (e) {}\n            sourceNode = null;\n        }\n        ended = true;\n        paused = false;\n        pausedAt = 0;\n        playing = false;\n        startedAt = 0;\n    }\n\n    function pause() {\n        var elapsed = context.currentTime - startedAt;\n        stop();\n        pausedAt = elapsed;\n        playing = false;\n        paused = true;\n    }\n\n    /*\n     * Destroy\n     */\n\n    function destroy() {\n        stop();\n        context = null;\n        sourceNode = null;\n        stream = null;\n        window.mozHack = null;\n    }\n\n    /*\n     * Api\n     */\n\n    var api = {\n        play: play,\n        pause: pause,\n        stop: stop,\n        destroy: destroy,\n\n        duration: 0,\n        progress: 0\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        currentTime: {\n            get: function get() {\n                if (pausedAt) {\n                    return pausedAt;\n                }\n                if (startedAt) {\n                    return context.currentTime - startedAt;\n                }\n                return 0;\n            }\n        },\n        ended: {\n            get: function get() {\n                return ended;\n            }\n        },\n        paused: {\n            get: function get() {\n                return paused;\n            }\n        },\n        playing: {\n            get: function get() {\n                return playing;\n            }\n        },\n        sourceNode: {\n            get: function get() {\n                return createSourceNode();\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nfunction OscillatorSource(type, context) {\n    var ended = false,\n        paused = false,\n        pausedAt = 0,\n        playing = false,\n        sourceNode = null,\n        // OscillatorSourceNode\n    startedAt = 0,\n        frequency = 200,\n        api = null;\n\n    function createSourceNode() {\n        if (!sourceNode && context) {\n            sourceNode = context.createOscillator();\n            sourceNode.type = type;\n            sourceNode.frequency.value = frequency;\n        }\n        return sourceNode;\n    }\n\n    /*\n     * Controls\n     */\n\n    function play(delay) {\n        delay = delay || 0;\n        if (delay) {\n            delay = context.currentTime + delay;\n        }\n\n        createSourceNode();\n        sourceNode.start(delay);\n\n        if (pausedAt) {\n            startedAt = context.currentTime - pausedAt;\n        } else {\n            startedAt = context.currentTime;\n        }\n\n        ended = false;\n        playing = true;\n        paused = false;\n        pausedAt = 0;\n    }\n\n    function stop() {\n        if (sourceNode) {\n            try {\n                sourceNode.stop(0);\n            } catch (e) {}\n            sourceNode = null;\n        }\n        ended = true;\n        paused = false;\n        pausedAt = 0;\n        playing = false;\n        startedAt = 0;\n    }\n\n    function pause() {\n        var elapsed = context.currentTime - startedAt;\n        stop();\n        pausedAt = elapsed;\n        playing = false;\n        paused = true;\n    }\n\n    /*\n     * Destroy\n     */\n\n    function destroy() {\n        stop();\n        context = null;\n        sourceNode = null;\n    }\n\n    /*\n     * Api\n     */\n\n    api = {\n        play: play,\n        pause: pause,\n        stop: stop,\n        destroy: destroy\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        currentTime: {\n            get: function get() {\n                if (pausedAt) {\n                    return pausedAt;\n                }\n                if (startedAt) {\n                    return context.currentTime - startedAt;\n                }\n                return 0;\n            }\n        },\n        duration: {\n            value: 0\n        },\n        ended: {\n            get: function get() {\n                return ended;\n            }\n        },\n        frequency: {\n            get: function get() {\n                return frequency;\n            },\n            set: function set(value) {\n                frequency = value;\n                if (sourceNode) {\n                    sourceNode.frequency.value = value;\n                }\n            }\n        },\n        paused: {\n            get: function get() {\n                return paused;\n            }\n        },\n        playing: {\n            get: function get() {\n                return playing;\n            }\n        },\n        progress: {\n            value: 0\n        },\n        sourceNode: {\n            get: function get() {\n                return createSourceNode();\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nfunction ScriptSource(data, context) {\n    var bufferSize = data.bufferSize || 1024;\n    var channels = data.channels || 1;\n    var ended = false,\n        onProcess = data.callback.bind(data.thisArg || this),\n        paused = false,\n        pausedAt = 0,\n        playing = false,\n        sourceNode = null,\n        // ScriptSourceNode\n    startedAt = 0,\n        api = null;\n\n    function createSourceNode() {\n        if (!sourceNode && context) {\n            sourceNode = context.createScriptProcessor(bufferSize, 0, channels);\n        }\n        return sourceNode;\n    }\n\n    /*\n     * Controls\n     */\n\n    function play() {\n        createSourceNode();\n        sourceNode.onaudioprocess = onProcess;\n\n        startedAt = context.currentTime - pausedAt;\n        ended = false;\n        paused = false;\n        pausedAt = 0;\n        playing = true;\n    }\n\n    function onPaused(event) {\n        var buffer = event.outputBuffer;\n        for (var i = 0; i < buffer.numberOfChannels; i++) {\n            var channel = buffer.getChannelData(i);\n            for (var j = 0; j < channel.length; j++) {\n                channel[j] = 0;\n            }\n        }\n    }\n\n    function stop() {\n        if (sourceNode) {\n            sourceNode.onaudioprocess = onPaused;\n        }\n        ended = true;\n        paused = false;\n        pausedAt = 0;\n        playing = false;\n        startedAt = 0;\n    }\n\n    function pause() {\n        var elapsed = context.currentTime - startedAt;\n        stop();\n        pausedAt = elapsed;\n        playing = false;\n        paused = true;\n    }\n\n    /*\n     * Destroy\n     */\n\n    function destroy() {\n        stop();\n        context = null;\n        onProcess = null;\n        sourceNode = null;\n    }\n\n    /*\n     * Api\n     */\n\n    api = {\n        play: play,\n        pause: pause,\n        stop: stop,\n        destroy: destroy,\n\n        duration: 0,\n        progress: 0\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        currentTime: {\n            get: function get() {\n                if (pausedAt) {\n                    return pausedAt;\n                }\n                if (startedAt) {\n                    return context.currentTime - startedAt;\n                }\n                return 0;\n            }\n        },\n        ended: {\n            get: function get() {\n                return ended;\n            }\n        },\n        paused: {\n            get: function get() {\n                return paused;\n            }\n        },\n        playing: {\n            get: function get() {\n                return playing;\n            }\n        },\n        sourceNode: {\n            get: function get() {\n                return createSourceNode();\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nfunction waveform() {\n    var buffer = void 0,\n        wave = void 0;\n\n    return function (audioBuffer, length) {\n        if (!window.Float32Array || !window.AudioBuffer) {\n            return [];\n        }\n\n        var sameBuffer = buffer === audioBuffer;\n        var sameLength = wave && wave.length === length;\n        if (sameBuffer && sameLength) {\n            return wave;\n        }\n\n        //console.time('waveData');\n        if (!wave || wave.length !== length) {\n            wave = new Float32Array(length);\n        }\n\n        if (!audioBuffer) {\n            return wave;\n        }\n\n        // cache for repeated calls\n        buffer = audioBuffer;\n\n        var chunk = Math.floor(buffer.length / length),\n            resolution = 5,\n            // 10\n        incr = Math.max(Math.floor(chunk / resolution), 1);\n        var greatest = 0;\n\n        for (var i = 0; i < buffer.numberOfChannels; i++) {\n            // check each channel\n            var channel = buffer.getChannelData(i);\n            for (var j = 0; j < length; j++) {\n                // get highest value within the chunk\n                for (var k = j * chunk, l = k + chunk; k < l; k += incr) {\n                    // select highest value from channels\n                    var a = channel[k];\n                    if (a < 0) {\n                        a = -a;\n                    }\n                    if (a > wave[j]) {\n                        wave[j] = a;\n                    }\n                    // update highest overall for scaling\n                    if (a > greatest) {\n                        greatest = a;\n                    }\n                }\n            }\n        }\n        // scale up\n        var scale = 1 / greatest;\n        for (var _i = 0; _i < wave.length; _i++) {\n            wave[_i] *= scale;\n        }\n        //console.timeEnd('waveData');\n\n        return wave;\n    };\n}\n\nfunction Sound(config) {\n    var context = config.context;\n    var destination = config.destination;\n    var effect = new Effect(context);\n    var gain = effect.gain();\n    var wave = waveform();\n\n    var id = null;\n    var data = null;\n    var isTouchLocked = false;\n    var loader = null;\n    var loop = false;\n    var playbackRate = 1;\n    var playWhenReady = null;\n    var source = null;\n    var sound = null;\n\n    if (context) {\n        effect.setDestination(gain);\n        gain.connect(destination || context.destination);\n    }\n\n    /*\n     * Create source\n     */\n\n    function createSource(value) {\n        data = value;\n\n        if (file.isAudioBuffer(data)) {\n            source = new BufferSource(data, context, function () {\n                return sound.emit('ended', sound);\n            });\n        } else if (file.isMediaElement(data)) {\n            source = new MediaSource(data, context, function () {\n                return sound.emit('ended', sound);\n            });\n        } else if (file.isMediaStream(data)) {\n            source = new MicrophoneSource(data, context);\n        } else if (file.isOscillatorType(data && data.type || data)) {\n            source = new OscillatorSource(data.type || data, context);\n        } else if (file.isScriptConfig(data)) {\n            source = new ScriptSource(data, context);\n        } else {\n            throw new Error('Cannot detect data type: ' + data);\n        }\n\n        effect.setSource(source.sourceNode);\n\n        sound.emit('ready', sound);\n\n        if (playWhenReady) {\n            playWhenReady();\n        }\n    }\n\n    /*\n     * Load\n     */\n\n    function onLoad(fileData) {\n        createSource(fileData);\n        sound.emit('loaded', sound);\n    }\n\n    function onLoadError(err) {\n        sound.emit('error', sound, err);\n    }\n\n    function load() {\n        var newConfig = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n        var force = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n        var skipLoad = !force && !source && !!config.deferLoad;\n\n        if (newConfig) {\n            var src = file.getSupportedFile(config.src || config.url || config.data || config) || config.src;\n            config = Object.assign(config, newConfig, { src: src });\n        }\n\n        if (source && data && data.tagName) {\n            source.load(config.src);\n        } else {\n            loader = loader || new Loader(config.src, skipLoad);\n            loader.audioContext = !!config.asMediaElement ? null : context;\n            loader.isTouchLocked = isTouchLocked;\n            loader.off('loaded', onLoad);\n            loader.once('loaded', onLoad);\n            loader.off('error', onLoadError);\n            loader.on('error', onLoadError);\n        }\n        return sound;\n    }\n\n    /*\n     * Controls\n     */\n\n    function play(delay, offset) {\n        if (!source || isTouchLocked) {\n            playWhenReady = function playWhenReady() {\n                if (source) {\n                    play(delay, offset);\n                }\n            };\n            if (!!config.deferLoad) {\n                if (!loader) {\n                    load(null, true);\n                }\n                loader.start(true);\n            }\n            return sound;\n        }\n        playWhenReady = null;\n        effect.setSource(source.sourceNode);\n\n        // update volume needed for no webaudio\n        if (!context) {\n            sound.volume = gain.gain.value;\n        }\n\n        source.play(delay, offset);\n\n        if (source.hasOwnProperty('loop')) {\n            source.loop = loop;\n        }\n\n        sound.emit('play', sound);\n\n        return sound;\n    }\n\n    function pause() {\n        source && source.pause();\n        sound.emit('pause', sound);\n        return sound;\n    }\n\n    function stop(delay) {\n        source && source.stop(delay || 0);\n        sound.emit('stop', sound);\n        return sound;\n    }\n\n    function seek(percent) {\n        if (source) {\n            source.stop();\n            play(0, source.duration * percent);\n        }\n        return sound;\n    }\n\n    function fade(volume, duration) {\n        if (!source) {\n            return sound;\n        }\n\n        var param = gain.gain;\n\n        if (context) {\n            var time = context.currentTime;\n            param.cancelScheduledValues(time);\n            param.setValueAtTime(param.value, time);\n            param.linearRampToValueAtTime(volume, time + duration);\n        } else if (typeof source.fade === 'function') {\n            source.fade(volume, duration);\n            param.value = volume;\n        }\n\n        sound.emit('fade', sound, volume);\n\n        return sound;\n    }\n\n    function unload() {\n        source && source.destroy();\n        loader && loader.destroy();\n        data = null;\n        playWhenReady = null;\n        source = null;\n        loader = null;\n        config.deferLoad = true;\n        sound.emit('unload', sound);\n    }\n\n    function reload() {\n        load(null, true);\n    }\n\n    /*\n     * Destroy\n     */\n\n    function destroy() {\n        source && source.destroy();\n        effect && effect.destroy();\n        gain && gain.disconnect();\n        loader && loader.off('loaded');\n        loader && loader.off('error');\n        loader && loader.destroy();\n        sound.off('loaded');\n        sound.off('ended');\n        sound.off('error');\n        gain = null;\n        context = null;\n        destination = null;\n        data = null;\n        playWhenReady = null;\n        source = null;\n        effect = null;\n        loader = null;\n        wave = null;\n        config = null;\n        sound.emit('destroy', sound);\n        sound.off('destroy');\n    }\n\n    sound = Object.create(Emitter.prototype, {\n        _events: {\n            value: {}\n        },\n        constructor: {\n            value: Sound\n        },\n        play: {\n            value: play\n        },\n        pause: {\n            value: pause\n        },\n        load: {\n            value: load\n        },\n        seek: {\n            value: seek\n        },\n        stop: {\n            value: stop\n        },\n        fade: {\n            value: fade\n        },\n        unload: {\n            value: unload\n        },\n        reload: {\n            value: reload\n        },\n        destroy: {\n            value: destroy\n        },\n        context: {\n            value: context\n        },\n        currentTime: {\n            get: function get() {\n                return source ? source.currentTime : 0;\n            },\n            set: function set(value) {\n                // const silent = sound.playing;\n                source && source.stop();\n                // play(0, value, silent);\n                play(0, value);\n            }\n        },\n        data: {\n            get: function get() {\n                return data;\n            },\n            set: function set(value) {\n                if (!value) {\n                    return;\n                }\n                createSource(value);\n            }\n        },\n        duration: {\n            get: function get() {\n                return source ? source.duration : 0;\n            }\n        },\n        effect: {\n            value: effect\n        },\n        ended: {\n            get: function get() {\n                return !!source && source.ended;\n            }\n        },\n        frequency: {\n            get: function get() {\n                return source ? source.frequency : 0;\n            },\n            set: function set(value) {\n                if (source && source.hasOwnProperty('frequency')) {\n                    source.frequency = value;\n                }\n            }\n        },\n        gain: {\n            value: gain\n        },\n        id: {\n            get: function get() {\n                return id;\n            },\n            set: function set(value) {\n                id = value;\n            }\n        },\n        isTouchLocked: {\n            set: function set(value) {\n                isTouchLocked = value;\n                if (loader) {\n                    loader.isTouchLocked = value;\n                }\n                if (!value && playWhenReady) {\n                    playWhenReady();\n                }\n            }\n        },\n        loader: {\n            get: function get() {\n                return loader;\n            }\n        },\n        loop: {\n            get: function get() {\n                return loop;\n            },\n            set: function set(value) {\n                loop = !!value;\n\n                if (source && source.hasOwnProperty('loop') && source.loop !== loop) {\n                    source.loop = loop;\n                }\n            }\n        },\n        config: {\n            get: function get() {\n                return config;\n            }\n        },\n        paused: {\n            get: function get() {\n                return !!source && source.paused;\n            }\n        },\n        playing: {\n            get: function get() {\n                return !!source && source.playing;\n            }\n        },\n        playbackRate: {\n            get: function get() {\n                return playbackRate;\n            },\n            set: function set(value) {\n                playbackRate = value;\n                if (source) {\n                    source.playbackRate = playbackRate;\n                }\n            }\n        },\n        progress: {\n            get: function get() {\n                return source ? source.progress : 0;\n            }\n        },\n        sourceNode: {\n            get: function get() {\n                return source ? source.sourceNode : null;\n            }\n        },\n        volume: {\n            get: function get() {\n                if (context) {\n                    return gain.gain.value;\n                }\n                if (source && source.hasOwnProperty('volume')) {\n                    return source.volume;\n                }\n                return 1;\n            },\n            set: function set(value) {\n                if (isNaN(value)) {\n                    return;\n                }\n\n                value = Math.min(Math.max(value, 0), 1);\n\n                var param = gain.gain;\n\n                if (context) {\n                    var time = context.currentTime;\n                    param.cancelScheduledValues(time);\n                    param.value = value;\n                    param.setValueAtTime(value, time);\n                } else {\n                    param.value = value;\n\n                    if (source && source.hasOwnProperty('volume')) {\n                        source.volume = value;\n                    }\n                }\n            }\n        },\n        // for media element source\n        groupVolume: {\n            get: function get() {\n                return source.groupVolume;\n            },\n            set: function set(value) {\n                if (source && source.hasOwnProperty('groupVolume')) {\n                    source.groupVolume = value;\n                }\n            }\n        },\n        waveform: {\n            value: function value(length) {\n                if (!data) {\n                    sound.once('ready', function () {\n                        return wave(data, length);\n                    });\n                }\n                return wave(data, length);\n            }\n        },\n        userData: {\n            value: {}\n        }\n    });\n\n    return sound;\n}\n\n// expose for unit tests\nSound.__source = {\n    BufferSource: BufferSource,\n    MediaSource: MediaSource,\n    MicrophoneSource: MicrophoneSource,\n    OscillatorSource: OscillatorSource,\n    ScriptSource: ScriptSource\n};\n\nfunction SoundGroup(context, destination) {\n    var group = new Group(context, destination);\n    var sounds = group.sounds;\n    var playbackRate = 1,\n        loop = false,\n        src = void 0;\n\n    function getSource() {\n        if (!sounds.length) {\n            return;\n        }\n\n        src = sounds.slice(0).sort(function (a, b) {\n            return b.duration - a.duration;\n        })[0];\n    }\n\n    var add = group.add;\n    group.add = function (sound) {\n        add(sound);\n        getSource();\n        return group;\n    };\n\n    var remove = group.rmeove;\n    group.remove = function (soundOrId) {\n        remove(soundOrId);\n        getSource();\n        return group;\n    };\n\n    Object.defineProperties(group, {\n        currentTime: {\n            get: function get() {\n                return src ? src.currentTime : 0;\n            },\n            set: function set(value) {\n                this.stop();\n                this.play(0, value);\n            }\n        },\n        duration: {\n            get: function get() {\n                return src ? src.duration : 0;\n            }\n        },\n        // ended: {\n        //     get: function() {\n        //         return src ? src.ended : false;\n        //     }\n        // },\n        loop: {\n            get: function get() {\n                return loop;\n            },\n            set: function set(value) {\n                loop = !!value;\n                sounds.forEach(function (sound) {\n                    sound.loop = loop;\n                });\n            }\n        },\n        paused: {\n            get: function get() {\n                // return src ? src.paused : false;\n                return !!src && src.paused;\n            }\n        },\n        progress: {\n            get: function get() {\n                return src ? src.progress : 0;\n            }\n        },\n        playbackRate: {\n            get: function get() {\n                return playbackRate;\n            },\n            set: function set(value) {\n                playbackRate = value;\n                sounds.forEach(function (sound) {\n                    sound.playbackRate = playbackRate;\n                });\n            }\n        },\n        playing: {\n            get: function get() {\n                // return src ? src.playing : false;\n                return !!src && src.playing;\n            }\n        }\n    });\n\n    return group;\n}\n\nfunction Microphone(connected, denied, error) {\n    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n    error = error || function () {};\n\n    var isSupported = !!navigator.getUserMedia;\n    var api = {};\n    var stream = null;\n\n    function connect() {\n        if (!isSupported) {\n            return api;\n        }\n\n        navigator.getUserMedia({\n            audio: true\n        }, function (micStream) {\n            stream = micStream;\n            connected(stream);\n        }, function (e) {\n            if (denied && e.name === 'PermissionDeniedError' || e === 'PERMISSION_DENIED') {\n                // console.log('Permission denied. Reset by clicking the camera icon with the red cross.');\n                denied();\n            } else {\n                error(e.message || e);\n            }\n        });\n        return api;\n    }\n\n    function disconnect() {\n        if (stream) {\n            stream.stop();\n            stream = null;\n        }\n        return api;\n    }\n\n    Object.defineProperties(api, {\n        connect: {\n            value: connect\n        },\n        disconnect: {\n            value: disconnect\n        },\n        isSupported: {\n            value: isSupported\n        },\n        stream: {\n            get: function get() {\n                return stream;\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nvar halfPI = Math.PI / 2;\nvar twoPI = Math.PI * 2;\n\nfunction waveformer(config) {\n\n    var style = config.style || 'fill',\n        // 'fill' or 'line'\n    shape = config.shape || 'linear',\n        // 'circular' or 'linear'\n    color = config.color || 0,\n        bgColor = config.bgColor,\n        lineWidth = config.lineWidth || 1,\n        percent = config.percent || 1,\n        originX = config.x || 0,\n        originY = config.y || 0,\n        transform = config.transform;\n\n    var canvas = config.canvas,\n        width = config.width || canvas && canvas.width,\n        height = config.height || canvas && canvas.height;\n\n    var ctx = null,\n        currentColor = void 0,\n        i = void 0,\n        x = void 0,\n        y = void 0,\n        radius = void 0,\n        innerRadius = void 0,\n        centerX = void 0,\n        centerY = void 0;\n\n    if (!canvas && !config.context) {\n        canvas = document.createElement('canvas');\n        width = width || canvas.width;\n        height = height || canvas.height;\n        canvas.width = height;\n        canvas.height = height;\n    }\n\n    if (shape === 'circular') {\n        radius = config.radius || Math.min(height / 2, width / 2);\n        innerRadius = config.innerRadius || radius / 2;\n        centerX = originX + width / 2;\n        centerY = originY + height / 2;\n    }\n\n    ctx = config.context || canvas.getContext('2d');\n\n    function clear() {\n        if (bgColor) {\n            ctx.fillStyle = bgColor;\n            ctx.fillRect(originX, originY, width, height);\n        } else {\n            ctx.clearRect(originX, originY, width, height);\n        }\n\n        ctx.lineWidth = lineWidth;\n\n        currentColor = null;\n\n        if (typeof color !== 'function') {\n            ctx.strokeStyle = color;\n            ctx.beginPath();\n        }\n    }\n\n    function updateColor(position, length, value) {\n        if (typeof color === 'function') {\n            var newColor = color(position, length, value);\n            if (newColor !== currentColor) {\n                currentColor = newColor;\n                ctx.stroke();\n                ctx.strokeStyle = currentColor;\n                ctx.beginPath();\n            }\n        }\n    }\n\n    function getValue(value, position, length) {\n        if (typeof transform === 'function') {\n            return transform(value, position, length);\n        }\n        return value;\n    }\n\n    function getWaveform(value, length) {\n        if (value && typeof value.waveform === 'function') {\n            return value.waveform(length);\n        }\n        if (value) {\n            return value;\n        }\n        if (config.waveform) {\n            return config.waveform;\n        }\n        if (config.sound) {\n            return config.sound.waveform(length);\n        }\n        return null;\n    }\n\n    function update(wave) {\n\n        clear();\n\n        if (shape === 'circular') {\n            var waveform = getWaveform(wave, 360);\n            var length = Math.floor(waveform.length * percent);\n\n            var step = twoPI / length;\n            var angle = void 0,\n                magnitude = void 0,\n                sine = void 0,\n                cosine = void 0;\n\n            for (i = 0; i < length; i++) {\n                var value = getValue(waveform[i], i, length);\n                updateColor(i, length, value);\n\n                angle = i * step - halfPI;\n                cosine = Math.cos(angle);\n                sine = Math.sin(angle);\n\n                if (style === 'fill') {\n                    x = centerX + innerRadius * cosine;\n                    y = centerY + innerRadius * sine;\n                    ctx.moveTo(x, y);\n                }\n\n                magnitude = innerRadius + (radius - innerRadius) * value;\n                x = centerX + magnitude * cosine;\n                y = centerY + magnitude * sine;\n\n                if (style === 'line' && i === 0) {\n                    ctx.moveTo(x, y);\n                }\n\n                ctx.lineTo(x, y);\n            }\n\n            if (style === 'line') {\n                ctx.closePath();\n            }\n        } else {\n\n            var _waveform = getWaveform(wave, width);\n            var _length = Math.min(_waveform.length, width - lineWidth / 2);\n            _length = Math.floor(_length * percent);\n\n            for (i = 0; i < _length; i++) {\n                var _value = getValue(_waveform[i], i, _length);\n                updateColor(i, _length, _value);\n\n                if (style === 'line' && i > 0) {\n                    ctx.lineTo(x, y);\n                }\n\n                x = originX + i;\n                y = originY + height - Math.round(height * _value);\n                y = Math.floor(Math.min(y, originY + height - lineWidth / 2));\n\n                if (style === 'fill') {\n                    ctx.moveTo(x, y);\n                    ctx.lineTo(x, originY + height);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n        }\n        ctx.stroke();\n    }\n\n    update.canvas = canvas;\n\n    if (config.waveform || config.sound) {\n        update();\n    }\n\n    return update;\n}\n\n/*\n * audio ctx\n */\nvar ctx = void 0;\nvar offlineCtx = void 0;\n\nfunction getContext() {\n\tif (ctx) {\n\t\treturn ctx;\n\t}\n\n\tvar desiredSampleRate = 44100;\n\n\tvar Ctx = window.AudioContext || window.webkitAudioContext;\n\n\tctx = Ctx ? new Ctx() : null;\n\n\t// Check if hack is necessary. Only occurs in iOS6+ devices\n\t// and only when you first boot the iPhone, or play a audio/video\n\t// with a different sample rate\n\t// https://github.com/Jam3/ios-safe-audio-context/blob/master/index.js\n\tif (/(iPhone|iPad)/i.test(navigator.userAgent) && ctx.sampleRate !== desiredSampleRate) {\n\t\tvar buffer = ctx.createBuffer(1, 1, desiredSampleRate);\n\t\tvar dummy = ctx.createBufferSource();\n\t\tdummy.buffer = buffer;\n\t\tdummy.connect(ctx.destination);\n\t\tdummy.start(0);\n\t\tdummy.disconnect();\n\n\t\tctx.close(); // dispose old context\n\t\tctx = Ctx ? new Ctx() : null;\n\t}\n\n\t// Handles bug in Safari 9 OSX where AudioContext instance starts in 'suspended' state\n\n\tvar isSuspended = ctx && ctx.state === 'suspended';\n\n\tif (isSuspended && typeof ctx.resume === 'function') {\n\t\twindow.setTimeout(function () {\n\t\t\tctx.resume();\n\t\t}, 1000);\n\t}\n\n\treturn ctx;\n}\n\n/*\nIn contrast with a standard AudioContext, an OfflineAudioContext doesn't render\nthe audio to the device hardware;\ninstead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.\n*/\nfunction getOfflineContext(numOfChannels, length, sampleRate) {\n\tif (offlineCtx) {\n\t\treturn offlineCtx;\n\t}\n\tnumOfChannels = numOfChannels || 2;\n\tsampleRate = sampleRate || 44100;\n\tlength = sampleRate || numOfChannels;\n\n\tvar OfflineCtx = window.OfflineAudioContext || window.webkitOfflineAudioContext;\n\n\tofflineCtx = OfflineCtx ? new OfflineCtx(numOfChannels, length, sampleRate) : null;\n\n\treturn offlineCtx;\n}\n\n/*\n * clone audio buffer\n */\n\nfunction cloneBuffer(buffer) {\n\tif (!ctx) {\n\t\treturn buffer;\n\t}\n\n\tvar numChannels = buffer.numberOfChannels,\n\t    cloned = ctx.createBuffer(numChannels, buffer.length, buffer.sampleRate);\n\tfor (var i = 0; i < numChannels; i++) {\n\t\tcloned.getChannelData(i).set(buffer.getChannelData(i));\n\t}\n\treturn cloned;\n}\n\n/*\n * reverse audio buffer\n */\n\nfunction reverseBuffer(buffer) {\n\tvar numChannels = buffer.numberOfChannels;\n\tfor (var i = 0; i < numChannels; i++) {\n\t\tArray.prototype.reverse.call(buffer.getChannelData(i));\n\t}\n\treturn buffer;\n}\n\n/*\n * ramp audio param\n */\n\nfunction ramp(param, fromValue, toValue, duration, linear) {\n\tif (!ctx) {\n\t\treturn;\n\t}\n\n\tparam.setValueAtTime(fromValue, ctx.currentTime);\n\n\tif (linear) {\n\t\tparam.linearRampToValueAtTime(toValue, ctx.currentTime + duration);\n\t} else {\n\t\tparam.exponentialRampToValueAtTime(toValue, ctx.currentTime + duration);\n\t}\n}\n\n/*\n * get frequency from min to max by passing 0 to 1\n */\n\nfunction getFrequency(value) {\n\tif (!ctx) {\n\t\treturn 0;\n\t}\n\t// get frequency by passing number from 0 to 1\n\t// Clamp the frequency between the minimum value (40 Hz) and half of the\n\t// sampling rate.\n\tvar minValue = 40;\n\tvar maxValue = ctx.sampleRate / 2;\n\t// Logarithm (base 2) to compute how many octaves fall in the range.\n\tvar numberOfOctaves = Math.log(maxValue / minValue) / Math.LN2;\n\t// Compute a multiplier from 0 to 1 based on an exponential scale.\n\tvar multiplier = Math.pow(2, numberOfOctaves * (value - 1.0));\n\t// Get back to the frequency value between min and max.\n\treturn maxValue * multiplier;\n}\n\n/*\n * microphone util\n */\n\nfunction microphone(connected, denied, error) {\n\treturn new Microphone(connected, denied, error);\n}\n\n/*\n * Format seconds as timecode string\n */\n\nfunction timeCode(seconds) {\n\tvar delim = arguments.length <= 1 || arguments[1] === undefined ? ':' : arguments[1];\n\n\t// const h = Math.floor(seconds / 3600);\n\t// const m = Math.floor((seconds % 3600) / 60);\n\tvar m = Math.floor(seconds / 60);\n\tvar s = Math.floor(seconds % 3600 % 60);\n\t// const hr = (h < 10 ? '0' + h + delim : h + delim);\n\tvar mn = (m < 10 ? '0' + m : m) + delim;\n\tvar sc = s < 10 ? '0' + s : s;\n\t// return hr + mn + sc;\n\treturn mn + sc;\n}\n\nvar utils = Object.freeze({\n\tgetContext: getContext,\n\tgetOfflineContext: getOfflineContext,\n\tcloneBuffer: cloneBuffer,\n\treverseBuffer: reverseBuffer,\n\tramp: ramp,\n\tgetFrequency: getFrequency,\n\tmicrophone: microphone,\n\ttimeCode: timeCode,\n\twaveformer: waveformer\n});\n\nfunction Sono() {\n    var VERSION = '0.1.85';\n    var context = utils.getContext();\n    var destination = context ? context.destination : null;\n    var group = new Group(context, destination);\n\n    var api = null;\n    var isTouchLocked = false;\n\n    /*\n     * Get Sound by id\n     */\n\n    function getSound(id) {\n        return group.find(id);\n    }\n\n    /*\n     * Create group\n     */\n\n    function createGroup(sounds) {\n        var soundGroup = new SoundGroup(context, group.gain);\n        if (sounds) {\n            sounds.forEach(function (sound) {\n                return soundGroup.add(sound);\n            });\n        }\n        return soundGroup;\n    }\n\n    /*\n     * Loading\n     */\n\n    function add(config) {\n        var soundContext = config && config.webAudio === false ? null : context;\n        // const sound = new Sound(soundContext, group.gain);\n        var src = file.getSupportedFile(config.src || config.url || config.data || config);\n        var sound = new Sound(Object.assign({}, config || {}, {\n            src: src,\n            context: soundContext,\n            destination: group.gain\n        }));\n        sound.isTouchLocked = isTouchLocked;\n        if (config) {\n            sound.id = config.id || config.name || '';\n            sound.loop = !!config.loop;\n            sound.volume = config.volume;\n        }\n        group.add(sound);\n        return sound;\n    }\n\n    function queue(config, loaderGroup) {\n        var sound = add(config).load();\n\n        if (loaderGroup) {\n            loaderGroup.add(sound.loader);\n        }\n        return sound;\n    }\n\n    function load(config) {\n        var src = config.src || config.url || config.data || config;\n        var sound = void 0,\n            loader = void 0;\n\n        if (file.containsURL(src)) {\n            sound = queue(config);\n            loader = sound.loader;\n        } else if (Array.isArray(src) && file.containsURL(src[0].src || src[0].url)) {\n            sound = [];\n            loader = new Loader.Group();\n            src.forEach(function (url) {\n                return sound.push(queue(url, loader));\n            });\n        } else {\n            var errorMessage = 'sono.load: No audio file URLs found in config.';\n            if (config.onError) {\n                config.onError('[ERROR] ' + errorMessage);\n            } else {\n                throw new Error(errorMessage);\n            }\n            return null;\n        }\n        if (config.onProgress) {\n            loader.on('progress', function (progress) {\n                return config.onProgress(progress);\n            });\n        }\n        if (config.onComplete) {\n            loader.once('complete', function () {\n                loader.off('progress');\n                config.onComplete(sound);\n            });\n        }\n        loader.once('error', function (err) {\n            loader.off('error');\n            if (config.onError) {\n                config.onError(err);\n            } else {\n                console.error('[ERROR] sono.load: ' + err);\n            }\n        });\n        loader.start();\n\n        return sound;\n    }\n\n    /*\n     * Create Sound\n     *\n     * Accepted values for param config:\n     * Object config e.g. { id:'foo', url:['foo.ogg', 'foo.mp3'] }\n     * Array (of files e.g. ['foo.ogg', 'foo.mp3'])\n     * ArrayBuffer\n     * HTMLMediaElement\n     * Filename string (e.g. 'foo.ogg')\n     * Oscillator type string (i.e. 'sine', 'square', 'sawtooth', 'triangle')\n     * ScriptProcessor config object (e.g. { bufferSize: 1024, channels: 1, callback: fn })\n     */\n\n    function createSound(config) {\n        // try to load if config contains URLs\n        if (file.containsURL(config)) {\n            return load(config);\n        }\n\n        var sound = add(config);\n        sound.data = config.data || config;\n\n        return sound;\n    }\n\n    /*\n     * Destroy\n     */\n\n    function destroySound(soundOrId) {\n        group.find(soundOrId, function (sound) {\n            return sound.destroy();\n        });\n        return api;\n    }\n\n    function destroyAll() {\n        group.destroy();\n        return api;\n    }\n\n    /*\n     * Controls\n     */\n\n    function mute() {\n        group.mute();\n        return api;\n    }\n\n    function unMute() {\n        group.unMute();\n        return api;\n    }\n\n    function fade(volume, duration) {\n        group.fade(volume, duration);\n        return api;\n    }\n\n    function pauseAll() {\n        group.pause();\n        return api;\n    }\n\n    function resumeAll() {\n        group.resume();\n        return api;\n    }\n\n    function stopAll() {\n        group.stop();\n        return api;\n    }\n\n    function play(id, delay, offset) {\n        group.find(id, function (sound) {\n            return sound.play(delay, offset);\n        });\n        return api;\n    }\n\n    function pause(id) {\n        group.find(id, function (sound) {\n            return sound.pause();\n        });\n        return api;\n    }\n\n    function stop(id) {\n        group.find(id, function (sound) {\n            return sound.stop();\n        });\n        return api;\n    }\n\n    /*\n     * Mobile touch lock\n     */\n\n    isTouchLocked = browser.handleTouchLock(context, function () {\n        isTouchLocked = false;\n        group.sounds.forEach(function (sound) {\n            return sound.isTouchLocked = false;\n        });\n    });\n\n    /*\n     * Page visibility events\n     */\n\n    (function () {\n        var pageHiddenPaused = [];\n\n        // pause currently playing sounds and store refs\n        function onHidden() {\n            group.sounds.forEach(function (sound) {\n                if (sound.playing) {\n                    sound.pause();\n                    pageHiddenPaused.push(sound);\n                }\n            });\n        }\n\n        // play sounds that got paused when page was hidden\n        function onShown() {\n            while (pageHiddenPaused.length) {\n                pageHiddenPaused.pop().play();\n            }\n        }\n\n        browser.handlePageVisibility(onHidden, onShown);\n    })();\n\n    /*\n     * Log version & device support info\n     */\n\n    function log() {\n        var title = 'sono ' + VERSION,\n            info = 'Supported:' + api.isSupported + ' WebAudioAPI:' + api.hasWebAudio + ' TouchLocked:' + isTouchLocked + ' State:' + (context && context.state) + ' Extensions:' + file.extensions;\n\n        if (navigator.userAgent.indexOf('Chrome') > -1) {\n            var args = ['%c ♫ ' + title + ' ♫ %c ' + info + ' ', 'color: #FFFFFF; background: #379F7A', 'color: #1F1C0D; background: #E0FBAC'];\n            console.log.apply(console, args);\n        } else if (window.console && window.console.log.call) {\n            console.log.call(console, title + ' ' + info);\n        }\n    }\n\n    api = {\n        createSound: createSound,\n        create: createSound,\n        destroySound: destroySound,\n        destroyAll: destroyAll,\n        getSound: getSound,\n        createGroup: createGroup,\n        file: file,\n        load: load,\n        mute: mute,\n        unMute: unMute,\n        fade: fade,\n        pauseAll: pauseAll,\n        resumeAll: resumeAll,\n        stopAll: stopAll,\n        play: play,\n        pause: pause,\n        stop: stop,\n        log: log,\n\n        canPlay: file.canPlay,\n        context: context,\n        getOfflineContext: utils.getOfflineContext,\n        effect: group.effect,\n        extensions: file.extensions,\n        hasWebAudio: !!context,\n        isSupported: file.extensions.length > 0,\n        gain: group.gain,\n        utils: utils,\n        VERSION: VERSION,\n\n        Sound: Sound,\n        Group: Group\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        isTouchLocked: {\n            get: function get() {\n                return isTouchLocked;\n            }\n        },\n        sounds: {\n            get: function get() {\n                return group.sounds.slice(0);\n            }\n        },\n        volume: {\n            get: function get() {\n                return group.volume;\n            },\n            set: function set(value) {\n                group.volume = value;\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nvar sono = new Sono();\n\nreturn sono;\n\n})));\n//# sourceMappingURL=sono.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}